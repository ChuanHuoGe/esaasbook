<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part1/chapter6/sub-chapter12.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="concluding-remarks-javascript-past-present-and-future">
<h1><span class="section-number">6.12. </span>Concluding Remarks: JavaScript Past, Present and Future<a class="headerlink" href="#concluding-remarks-javascript-past-present-and-future" title="Permalink to this headline">¶</a></h1>
<p>JavaScript’s privileged position as the client-side language of the Web has focused a lot of energy on it.
Just-in-time compilation (JIT) techniques and other advanced language engi- neering features are being brought
to bear on the language, closing the performance gap with other interpreted and even some compiled languages.
Over half a dozen <strong>JavaScript engine</strong> implementations and one compiler (Google’s Closure) are available as of
this writing, most of them open source, and vendors such as Microsoft, Apple, Google, and others compete on the
performance of their browsers’ JavaScript interpreters. As early as 2011, JavaScript was fast enough to use to
rewrite large parts of the Palm webOS operating system. We can expect this trend to continue, because JavaScript
is one of the first languages to receive attention when new hardware becomes available that could be useful for
user-facing apps.</p>
<p>We saw over and over again in studying Ruby and Rails that productivity often goes hand in hand with conciseness.
JavaScript’s syntax is sometimes awkward, in part be- cause JavaScript was always functional at heart (recall that
its creator originally wanted to use Scheme as the browser scripting language) and in part because its large community
of developers accustomed to class-oriented languages sometimes had difficulty embracing JavaScript’s alternative
model of prototype-based inheritance.</p>
<p>ECMAScript version 6 (ES6) attempts to address this by providing new keywords such as class that look more familiar
to such developers, but it’s important to remember that no new mechanisms or abilities were added to the language
in this case. The new keywords are syntactic sugar and the underlying objects are still not classes in, say, the
Java sense of the term. Prototype-based inheritance and lookup are still used to resolve references at runtime. Indeed,
it is possible to create a <strong>Source-to-source compiler</strong>, sometimes called a <em>transpiler</em>, that consumes ES6 and emits pure
JavaScript, as some early browsers’ implementations of ES6 did.</p>
<p>JavaScript’s single-threaded execution model, which some feel hampers productivity be- cause it requires event-driven
programming, seems unlikely to change anytime soon. Some bemoan the adoption of JavaScript-based server-side frameworks
such as Node, a JavaScript library that provides event-driven versions of the same POSIX (Unix-like) operating system
facilities used by task-parallel code. Rails core committer Yehuda Katz summarized the opin- ions of many experienced
programmers: when things happen in a deterministic order, such as server-side code handling a controller action in a
SaaS app, a sequential and blocking model is easier to program; when things happen in an unpredictable order, such as
reacting to ex- ternal stimuli like user-initiated user interface events, the asynchronous model makes more sense. Your
authors firmly believe that the future of software is “cloud+client” apps, and our view is that it’s more important to
choose the right language or framework for each job than to obsess about whether a single language or framework will
become dominant for both the client and cloud parts of the app.</p>
<p>We covered only a small part of the language-independent DOM representation using its JavaScript API. The DOM representation
itself has a rich set of data structures and traversal methods, and APIs are available for all major languages, such as
the <code class="code docutils literal notranslate"><span class="pre">dom4j</span></code> library for Java and the Nokogiri gem for Ruby.</p>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 6, section_id: 11) %>" title="previous page"><span class="section-number">6.11. </span>Fallacies and Pitfalls</a>
    <a class='right-next' id="next-link" href="<%= chapter_path(chapter_id: 7) %>" title="next page"><span class="section-number">7. </span>Requirements: BDD and User Stories</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>
