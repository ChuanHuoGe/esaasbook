
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>9.4. Comments and Commits: Documenting Code &#8212; saasbook  documentation</title>
    

    
  
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="9.5. Metrics, CodeSmells, and SOFA" href="5" />
    <link rel="prev" title="9.3. Establishing Ground Truth With Characterization Tests" href="3" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter9/sub-chapter4.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="comments-and-commits-documenting-code">
<h1><span class="section-number">9.4. </span>Comments and Commits: Documenting Code<a class="headerlink" href="#comments-and-commits-documenting-code" title="Permalink to this headline">¶</a></h1>
<p>Not only does legacy code often lack tests and good documentation, but its comments
are often missing or inconsistent with the code. Thus far, we have not offered advice
on how to write good comments, as we assume you already know how to write good code in
this book. We now offer a brief sermon on comments, so that once you write successful
characterization tests you can capture what you’ve learned by adding comments to the
legacy code. Good comments have two properties:</p>
<ol class="arabic simple">
<li><p>They document things that aren’t obvious from the code.</p></li>
<li><p>They are expressed at a higher level of abstraction than the code.</p></li>
</ol>
<p>Figure 9.8 shows examples of comments that violate both properties, and
Figure 9.9 shows a better example.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># Good Comment:</span>
<span class="c1"># Scan the array to see if the symbol exists</span>

<span class="c1"># Much better than:</span>
<span class="c1"># Loop through every array index, get the</span>
<span class="c1"># third value of the list in the content to</span>
<span class="c1"># determine if it has the symbol we are looking</span>
<span class="c1"># for. Set the result to the symbol if we</span>
<span class="c1"># find it.</span>
</pre></div>
</div>
<p>First, if you write comments as you code, much of what your code does is surely obvious
to you, since you just wrote it. (Alas, not commenting as you go is a common defect of
legacy code.) But if you or someone else reads your code later, long after you’ve forgotten
those design ideas, comments should help you remember the non-obvious reasons you wrote
the code the way you did. Examples of non-obvious things include the units for variables,
code invariants, subtle problems that required a particular implementation, or unusual code
that is there solely to work around some bug or account for a non-obvious boundary condition
or corner case. In the case of legacy code, you are trying to add comments to document what
went through another programmer’s mind; once you figure it out, be sure to write it down
before you forget!</p>
<p>Second, comments should raise the level of abstraction from the code. The programmer’s goal
is to write classes and other code that hides complexity; that is, to make it easier for
others to use this existing code rather than re-create it themselves. Comments should therefore
address concerns such as: What do I need to know to invoke this method? Are there preconditions,
assumptions, or caveats? Among other jobs, a comment should provide enough of this information
that someone who wants to call an existing class or method doesn’t have to read its source code
to figure these things out.</p>
<p>These guidelines are also generally true for commit messages, which you supply whenever you
commit a set of code changes. However, one important principle is that you shouldn’t put
information in a commit message that a future developer will need to know while working on
the code. Historical information—why a certain function was deleted or refactored, for
example—is appropriate for including in a commit message. But information that a developer
would need to know to use the code <em>as it exists now</em> should be in a comment, where the developer
cannot fail to see it when they go to edit the code.</p>
<p>As with many other elements of Agile, when a process isn’t working smoothly, it’s trying to
tell you something about your code. For example, we saw in Chapter 8 that when a test is hard
to write due to the need for extensive mocking and stubbing, the test is trying to tell you
that your code is not testable because it’s poorly factored. Similarly here: if following
the above guideline about comments vs. commits means you find yourself writing lots of
cautionary caveats in the comments, your code is telling you that it might benefit from a
refactoring cleanup so that you wouldn’t need to post so many warning signs for the next
developer who comes along with the intention of modifying it.</p>
<p>While virtually every other software engineering sermon in this book is paired with a tool
that makes it easy for you to stay on the true path and for others to check if you have
strayed, this is not the case for comments and commit messages. The only enforcement mechanism
beyond self-discipline is inspection, which we discuss in Sections 10.4 and 10.7.</p>
<p><strong>Self-Check 9.4.1.</strong> <em>True or False: One reason legacy code is long lasting is because it
typically has good comments.</em></p>
<blockquote>
<div><p>False. We wish it were true. Comments are often missing or inconsistent with the code,
which is one reason it is called legacy code rather than beautiful code.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="/chapter/9/section/3" title="previous page"><span class="section-number">9.3. </span>Establishing Ground Truth With Characterization Tests</a>
    <a class='right-next' id="next-link" href="/chapter/9/section/5" title="next page"><span class="section-number">9.5. </span>Metrics, CodeSmells, and SOFA</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>