
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>12.4. Releases and Feature Flags &#8212; saasbook  documentation</title>
    

    
  
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <script async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="12.5. Monitoring and Finding Bottlenecks" href="5" />
    <link rel="prev" title="12.3. Responsiveness, Service Level Objectives, and Apdex" href="3" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter12/sub-chapter4.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="releases-and-feature-flags">
<h1><span class="section-number">12.4. </span>Releases and Feature Flags<a class="headerlink" href="#releases-and-feature-flags" title="Permalink to this headline">¶</a></h1>
<p>As we discussed way back in Section 1.2, prior to SaaS, software releases were major
and infrequent milestones after which product maintenance responsibility passed largely
to the Quality Assurance or Customer Service department. In contrast, Many Agile companies
deploy new versions frequently (sometimes several times <em>per day</em>) and the developers stay
close to operations and to customer needs.</p>
<p>In Agile development, making deployment a <em>non</em>-event requires complete automation, so
that typing one command triggers all the actions to deploy a new version of the software,
including cleanly aborting the deploy without modifying the released version if anything
goes wrong. As with iteration-based TDD and BDD, by deploying frequently you become good
at it, and by automating deployment you ensure that it’s done consistently every time.</p>
<p>Although deployment is a non-event, there is still a role for release milestones: they
reassure the customer that new work is being deployed. For example, a customer-requested
feature may require multiple commits to implement, each of which may include a deployment,
but the overall feature remains “hidden” in the user interface until all changes are completed.
“Turning on” the feature would be a useful release milestone. For this reason, many
continuous-deployment workflows assign distinct and often whimsical labels to specific release
points (such as “Bamboo” and “Cedar” for Heroku’s software stacks), but just use the Git
commit-id to identify deployments that don’t include customer-visible changes.</p>
<p>Of course, deployment can only be successful if the app is well tested and stable in
development. Although we’ve already focused heavily on testing in this book, making deployment
a true non-event requires meeting two additional challenges: deployment testing and
incremental feature roll-out.</p>
<p>Beyond traditional CI, deployment testing must account for differences between the development
and production environments, such as the type of database used or the need for
JavaScript-intensive apps to work correctly on a variety of browser versions. Deployment testing
should also test the app in ways it was <em>never</em> meant to be used—users submitting non-sensical
input, browsers disabling cookies or JavaScript, miscreants trying to turn your site into a
distributor of <strong>malware</strong> (as we describe further in Section 12.9)—and ensuring that it survives
those conditions without compromising customer data or responsiveness.</p>
<p>The second challenge is the roll-out of complex features that may require several code pushes,
especially features that require database schema changes. In particular, a challenge arises when
the new code does not work with the old schema and vice-versa. To make the example concrete,
suppose RottenPotatoes currently has a <code class="code docutils literal notranslate"><span class="pre">moviegoers</span></code> table with a <code class="code docutils literal notranslate"><span class="pre">name</span></code> column, but we want to
change the schema to have separate <code class="code docutils literal notranslate"><span class="pre">first_name</span></code> and <code class="code docutils literal notranslate"><span class="pre">last_name</span></code>
columns instead. If we change the schema before changing the code, the app will break because
methods that expect to find the <code class="code docutils literal notranslate"><span class="pre">name</span></code> column will fail. If we change the code before changing
the schema, the app will break because the new methods will look for <code class="code docutils literal notranslate"><span class="pre">first_name</span></code> and <code class="code docutils literal notranslate"><span class="pre">last_name</span></code>
columns that don’t exist yet.</p>
<p>We could try to solve this problem by deploying the code and migration <strong>atomically</strong>: take the
service offline, apply the migration to perform the schema change and copy the data into the
new column, and bring the service back online. This approach is the simplest solution, but may
cause unacceptable unavailability: a complex migration on a database of hundreds of thousands
of rows can take tens of minutes or even hours to run.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="sr">/* in code paths for functionality that searches the database: */</span>
<span class="linenos"> 2</span><span class="k">if</span> <span class="p">(</span><span class="n">featureflag</span> <span class="n">is</span> <span class="n">on</span><span class="p">)</span>
<span class="linenos"> 3</span>    <span class="n">results</span> <span class="o">=</span> <span class="n">union</span><span class="p">(</span><span class="n">query</span> <span class="n">using</span> <span class="n">old</span> <span class="n">schema</span><span class="p">,</span> <span class="n">query</span> <span class="n">using</span> <span class="kp">new</span> <span class="n">schema</span><span class="p">)</span>
<span class="linenos"> 4</span><span class="k">else</span> <span class="sr">/* featureflag is off */</span>
<span class="linenos"> 5</span>    <span class="n">results</span> <span class="o">=</span> <span class="p">(</span><span class="n">query</span> <span class="n">using</span> <span class="n">old</span> <span class="n">schema</span><span class="p">)</span>
<span class="linenos"> 6</span><span class="k">end</span>
<span class="linenos"> 7</span>
<span class="linenos"> 8</span><span class="sr">/* in code paths that write to the database */</span>
<span class="linenos"> 9</span><span class="k">if</span> <span class="p">(</span><span class="n">featureflag</span> <span class="n">is</span> <span class="n">on</span><span class="p">)</span>
<span class="linenos">10</span>    <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="n">to</span> <span class="n">be</span> <span class="n">written</span> <span class="n">is</span> <span class="n">still</span> <span class="n">using</span> <span class="n">old</span> <span class="n">schema</span><span class="p">)</span>
<span class="linenos">11</span>        <span class="p">(</span><span class="n">convert</span> <span class="n">existing</span> <span class="n">record</span> <span class="n">from</span> <span class="n">old</span> <span class="n">to</span> <span class="kp">new</span> <span class="n">schema</span><span class="p">)</span>
<span class="linenos">12</span>        <span class="p">(</span><span class="n">mark</span> <span class="n">record</span> <span class="n">as</span> <span class="n">converted</span><span class="p">)</span>
<span class="linenos">13</span>    <span class="k">end</span>
<span class="linenos">14</span>    <span class="p">(</span><span class="n">update</span> <span class="n">data</span> <span class="n">according</span> <span class="n">to</span> <span class="kp">new</span> <span class="n">schema</span><span class="p">)</span>
<span class="linenos">15</span><span class="k">else</span>
<span class="linenos">16</span>    <span class="p">(</span><span class="n">update</span> <span class="n">data</span> <span class="n">according</span> <span class="n">to</span> <span class="n">old</span> <span class="n">schema</span><span class="p">)</span>
<span class="linenos">17</span><span class="k">end</span>
</pre></div>
</div>
<p>The second option is to split the change across multiple deployments using a <em>feature</em> <em>flag</em>—a configuration
variable whose value can be changed <em>while the app is running</em> to control which code paths in
the app are executed. Notice that each step in Figure 12.3 is nondestructive: as we did with
refactoring in Chapter 9, if something goes wrong at a given step, the app is still left in a
working intermediate state. Figure 12.3 illustrates schematically how to do this:</p>
<ol class="arabic simple">
<li><p>Create a migration that makes only those changes to the schema that <em>add</em> new tables or columns, including a column indicating whether the current record has been migrated to the new schema or not.</p></li>
<li><p>Create version <span class="math notranslate nohighlight">\(n+1\)</span> of the app in which every code path affected by the schema change is split into two code paths, of which one or the other is executed based on the value of a <em>feature flag</em>. Critical to this step is that correct code will be executed regardless of the feature flag’s value at any time, so the feature flag’s value can be changed without stopping and restarting the app; typically this is done by storing the feature flag in a special database table.</p></li>
<li><p>Deploy version <span class="math notranslate nohighlight">\(n+1\)</span>, which may require pushing the code to multiple servers, a process that can take several minutes.</p></li>
<li><p>Once deployment is complete (all servers have been updated to version <span class="math notranslate nohighlight">\(n+1\)</span> of the code), while the app is running set the feature flag’s value to True. Essentially, each record will be migrated to the new schema the next time it’s modified for any reason. If you wanted to speed things up, you could also run a low-traffic background job that opportunistically migrates a few records at a time to minimize the additional load on the app, or migrates many records at a time during hours when the app is lightly loaded, if any. If something goes wrong at this step, turn off the feature flag; the code will revert to the behavior of version <span class="math notranslate nohighlight">\(n\)</span>, since the new schema is a proper superset of the old schema and the <code class="code docutils literal notranslate"><span class="pre">before_save</span></code> callback is nondestructive (that is, it correctly updates the user’s name in both the old and new schemata).</p></li>
<li><p>If all goes well, once all records have been migrated, deploy code version <span class="math notranslate nohighlight">\(n+2\)</span>, in which the feature flag is removed and only the code path associated with the new schema remains.</p></li>
<li><p>Finally, apply a new migration that removes the old <code class="code docutils literal notranslate"><span class="pre">name</span></code> column and the temporary <code class="code docutils literal notranslate"><span class="pre">migrated</span></code> column (and therefore the index on that column).</p></li>
</ol>
<p>What about a schema change that modifies a column’s name or format rather than adding or
removing columns? The strategy is the same: add a new column, remove the old column, and if
necessary rename the new column, using feature flags during each transition so that every
deployed version of the code works with both versions of the schema.</p>
<p><strong>Self-Check 12.4.1.</strong> <em>Which of the following are appropriate places to store the value of a simple
Boolean feature flag and why: (a) a YAML file in the app’s</em> <code class="code docutils literal notranslate"><span class="pre">config</span></code> <em>directory, (b) a column in an
existing database table, (c) a separate database table?</em></p>
<blockquote>
<div><p>The point of a feature flag is to allow its value to be changed at runtime without modifying
the app. Therefore (a) is a poor choice because a YAML file cannot be changed without touching
the production servers while the app is running.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="/chapter/12/section/3" title="previous page"><span class="section-number">12.3. </span>Responsiveness, Service Level Objectives, and Apdex</a>
    <a class='right-next' id="next-link" href="/chapter/12/section/5" title="next page"><span class="section-number">12.5. </span>Monitoring and Finding Bottlenecks</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>