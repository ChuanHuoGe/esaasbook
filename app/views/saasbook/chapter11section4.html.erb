
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>11.4. Open/Closed Principle &#8212; saasbook  documentation</title>
    

    
  
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="11.5. Liskov Substitution Principle" href="5" />
    <link rel="prev" title="11.3. Single Responsibility Principle" href="3" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter11/sub-chapter4.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="open-closed-principle">
<h1><span class="section-number">11.4. </span>Open/Closed Principle<a class="headerlink" href="#open-closed-principle" title="Permalink to this headline">¶</a></h1>
<p>The <strong>Open/Closed Principle</strong> (OCP) of SOLID states that classes should be “open for
extension, but closed against modification.” That is, it should be possible to
extend the behavior of classes without modifying existing code on which other
classes or apps depend.</p>
<p>While adding subclasses that inherit from a base class is one way to extend existing
classes, it’s often not enough by itself. Figure 11.10 shows why the presence of <code class="code docutils literal notranslate"><span class="pre">case</span></code>-based
dispatching logic—one variant of the <em>Case Statement</em> design smell—suggests a possible OCP violation.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">Report</span>
<span class="linenos"> 2</span>    <span class="k">def</span> <span class="nf">output</span>
<span class="linenos"> 3</span>        <span class="n">formatter</span> <span class="o">=</span>
<span class="linenos"> 4</span>        <span class="k">case</span> <span class="vi">@format</span>
<span class="linenos"> 5</span>        <span class="k">when</span> <span class="ss">:html</span>
<span class="linenos"> 6</span>            <span class="no">HtmlFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
<span class="linenos"> 7</span>        <span class="k">when</span> <span class="ss">:pdf</span>
<span class="linenos"> 8</span>            <span class="no">PdfFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
<span class="linenos"> 9</span>            <span class="c1"># ... etc</span>
<span class="linenos">10</span>        <span class="k">end</span>
<span class="linenos">11</span>    <span class="k">end</span>
<span class="linenos">12</span><span class="k">end</span>
</pre></div>
</div>
<p>Depending on the specific case, various design patterns can help. One problem that the smelly
code in Figure 11.10 is trying to solve is that the desired subclass of <code class="code docutils literal notranslate"><span class="pre">Formatter</span></code> isn’t known
until runtime, when it is stored in the <code class="code docutils literal notranslate"><span class="pre">&#64;format</span></code> instance variable. The <strong>abstract factory pattern</strong>
provides a common interface for instantiating an object whose subclass may not be known until
runtime. Ruby’s duck typing and metaprogramming enable a particularly elegant implementation
of this pattern, as Figure 11.11 shows. (In statically-typed languages, to “work around” the
type system, we have to create a factory method for each subclass and have them all implement
a common interface—hence the name of the pattern.)</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">Report</span>
<span class="linenos"> 2</span>    <span class="k">def</span> <span class="nf">output</span>
<span class="linenos"> 3</span>        <span class="n">formatter_class</span> <span class="o">=</span>
<span class="linenos"> 4</span>        <span class="k">begin</span>
<span class="linenos"> 5</span>            <span class="vi">@format</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">classify</span><span class="o">.</span><span class="n">constantize</span>
<span class="linenos"> 6</span>        <span class="k">rescue</span> <span class="no">NameError</span>
<span class="linenos"> 7</span>            <span class="c1"># ...handle &#39;invalid formatter type&#39;</span>
<span class="linenos"> 8</span>        <span class="k">end</span>
<span class="linenos"> 9</span>        <span class="n">formatter</span> <span class="o">=</span> <span class="n">formatter_class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
<span class="linenos">10</span>        <span class="c1"># etc</span>
<span class="linenos">11</span>    <span class="k">end</span>
<span class="linenos">12</span><span class="k">end</span>
</pre></div>
</div>
<p>Another approach is to take advantage of the <strong>Strategy pattern</strong> or <strong>Template Method pattern</strong>. Both
support the case in which there is a general approach to doing a task but many possible variants.
The difference between the two is the level at which commonality is captured. With Template
Method, although the implementation of each step may differ, the set of steps is the same for
all variants; hence it is usually implemented using inheritance. With Strategy, the overall
task is the same, but the set of steps may be different in each variant; hence it is usually
implemented using composition. Figure 11.12 shows how either pattern could be applied to the
report formatter. If every kind of formatter followed the same high- level steps—for example,
generate the header, generate the report body, and then generate the footer—we could use
Template Method. On the other hand, if the steps themselves were quite different, it would
make more sense to use Strategy.</p>
<p>An example of the Strategy pattern in the wild is OmniAuth (Section 5.2): many apps need
third-party authentication, and the steps are quite different depending on the auth
provider, but the API to all of them is the same. Indeed, OmniAuth even refers to its
plug-ins as “strategies.”</p>
<p>A different kind of OCP violation arises when we want to <em>add</em> behaviors to an existing class
and discover that we cannot do so without modifying it. For example, PDF files can be
generated with or without password protection and with or without a “Draft” watermark across
the background. Both features amount to “tacking on” some extra behavior to what <code class="code docutils literal notranslate"><span class="pre">PdfFormatter</span></code>
already does. If you’ve done a lot of object-oriented programming, your first thought might
therefore be to solve the problem using inheritance, as the UML diagram in Figure 11.13 (left)
shows, but there are four permutations of features so you’d end up with four subclasses with
duplication across them—hardly DRY. Fortunately, the <strong>decorator pattern</strong> can help: we “decorate”
a class or method by wrapping it in an enhanced version that has the same API, allowing us to
compose multiple decorations as needed. Figure 11.14 shows the code corresponding to the more
elegant decorator-based design of the PDF format-er shown in Figure 11.13 (right).</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">PdfFormatter</span>
<span class="linenos"> 2</span>    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 3</span>    <span class="k">def</span> <span class="nf">output</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 4</span><span class="k">end</span>
<span class="linenos"> 5</span><span class="k">class</span> <span class="nc">PdfWithPasswordFormatter</span> <span class="o">&lt;</span> <span class="no">PdfFormatter</span>
<span class="linenos"> 6</span>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">base</span><span class="p">)</span> <span class="p">;</span> <span class="vi">@base</span> <span class="o">=</span> <span class="n">base</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 7</span>    <span class="k">def</span> <span class="nf">protect_with_password</span><span class="p">(</span><span class="n">original_output</span><span class="p">)</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 8</span>    <span class="k">def</span> <span class="nf">output</span> <span class="p">;</span> <span class="n">protect_with_password</span> <span class="vi">@base</span><span class="o">.</span><span class="n">output</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 9</span>    <span class="k">end</span>
<span class="linenos">10</span><span class="k">class</span> <span class="nc">PdfWithWatermarkFormatter</span> <span class="o">&lt;</span> <span class="no">PdfFormatter</span>
<span class="linenos">11</span>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">base</span><span class="p">)</span> <span class="p">;</span> <span class="vi">@base</span> <span class="o">=</span> <span class="n">base</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos">12</span>    <span class="k">def</span> <span class="nf">add_watermark</span><span class="p">(</span><span class="n">original_output</span><span class="p">)</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos">13</span>    <span class="k">def</span> <span class="nf">output</span> <span class="p">;</span> <span class="n">add_watermark</span> <span class="vi">@base</span><span class="o">.</span><span class="n">output</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos">14</span><span class="k">end</span>
<span class="linenos">15</span><span class="c1"># If we just want a plain PDF</span>
<span class="linenos">16</span><span class="n">formatter</span> <span class="o">=</span> <span class="no">PdfFormatter</span><span class="o">.</span><span class="n">new</span>
<span class="linenos">17</span><span class="c1"># If we want a &quot;draft&quot; watermark</span>
<span class="linenos">18</span><span class="n">formatter</span> <span class="o">=</span> <span class="no">PdfWithWatermarkFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">PdfFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
<span class="linenos">19</span><span class="c1"># Both password protection and watermark</span>
<span class="linenos">20</span><span class="n">formatter</span> <span class="o">=</span> <span class="no">PdfWithWatermarkFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
<span class="linenos">21</span><span class="no">PdfWithPasswordFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">PdfFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">))</span>
</pre></div>
</div>
<p>In the wild, the ActiveSupport module of Rails provides method-level decoration via
<code class="code docutils literal notranslate"><span class="pre">alias_method_chain</span></code>, which is very useful in conjunction with Ruby’s open classes, as Figure
11.15 shows. A more interesting example of Decorator in the wild is the Rack application server
we’ve been using since Chapter 3. The heart of Rack is a “middleware” module that receives an
HTTP request and returns a three-element array consisting of an HTTP response code, HTTP headers,
and a response body. A Rack-based application spec- ifies a “stack” of middleware components
that all requests traverse: to add a behavior to an HTTP request (for example, to intercept
certain requests as OmniAuth does to initiate an authentication flow), we decorate the basic
HTTP request behavior. Additional decorators add support for SSL (Secure Sockets Layer),
measuring app performance, and some types of HTTP caching.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="c1"># reopen Mailer class and decorate its send_email method.</span>
<span class="linenos"> 2</span><span class="k">class</span> <span class="nc">Mailer</span>
<span class="linenos"> 3</span>    <span class="n">alias_method_chain</span> <span class="ss">:send_email</span><span class="p">,</span> <span class="ss">:cc</span>
<span class="linenos"> 4</span>    <span class="k">def</span> <span class="nf">send_email_with_cc</span><span class="p">(</span><span class="n">recipient</span><span class="p">,</span><span class="n">body</span><span class="p">)</span> <span class="c1"># this is our new method</span>
<span class="linenos"> 5</span>        <span class="n">send_email_without_cc</span><span class="p">(</span><span class="n">recipient</span><span class="p">,</span><span class="n">body</span><span class="p">)</span> <span class="c1"># will call original method</span>
<span class="linenos"> 6</span>        <span class="n">copy_sender</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
<span class="linenos"> 7</span>    <span class="k">end</span>
<span class="linenos"> 8</span><span class="k">end</span>
<span class="linenos"> 9</span><span class="c1"># now we have two methods:</span>
<span class="linenos">10</span><span class="n">send_email</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>            <span class="c1"># calls send_email_with_cc</span>
<span class="linenos">11</span><span class="n">send_email_with_cc</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>    <span class="c1"># same thing</span>
<span class="linenos">12</span><span class="n">send_email_without_cc</span><span class="p">(</span><span class="o">...</span><span class="p">)</span> <span class="c1"># call (renamed) original method</span>
</pre></div>
</div>
<p><strong>Self-Check 11.4.1.</strong> <em>Here are two statements about delegation:</em></p>
<p><em>1. A subclass delegates a behavior to an ancestor class</em></p>
<p><em>2. A class delegates a behavior to a descendant class</em></p>
<p><em>Looking at the examples of the Template Method, Strategy, and Decorator patterns (Figures
11.12 and 11.13), which statement best describes how each pattern uses delegation?</em></p>
<blockquote>
<div><p>In Template Method and Strategy, the ancestor class provides the “basic game plan” which
is customized by delegating specific behaviors to different subclasses. In Decorator, each
subclass provides special functionality of its own, but delegates back to the ancestor class
for the “basic” functionality.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="/chapter/11/section/3" title="previous page"><span class="section-number">11.3. </span>Single Responsibility Principle</a>
    <a class='right-next' id="next-link" href="/chapter/11/section/5" title="next page"><span class="section-number">11.5. </span>Liskov Substitution Principle</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>