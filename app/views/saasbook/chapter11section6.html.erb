
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>11.6. Dependency Injection Principle &#8212; saasbook  documentation</title>
    

    
  
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <script async="async" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="11.7. Demeter Principle" href="7" />
    <link rel="prev" title="11.5. Liskov Substitution Principle" href="5" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter11/sub-chapter6.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="dependency-injection-principle">
<h1><span class="section-number">11.6. </span>Dependency Injection Principle<a class="headerlink" href="#dependency-injection-principle" title="Permalink to this headline">¶</a></h1>
<p>The dependency injection principle (DIP), sometimes also called dependency inversion,
states that if two classes depend on each other but their implementations may change,
it would be better for them to both depend on a separate abstract interface that is
“injected” between them.</p>
<p>Suppose RottenPotatoes now adds email marketing—interested moviegoers can receive
emails with discounts on their favorite movies. RottenPotatoes integrates with the external
email marketing service MailerMonkey to do this job:</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">EmailList</span>
<span class="linenos"> 2</span>    <span class="kp">attr_reader</span> <span class="ss">:mailer</span>
<span class="linenos"> 3</span>    <span class="n">delegate</span> <span class="ss">:send_email</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:mailer</span>
<span class="linenos"> 4</span>    <span class="k">def</span> <span class="nf">initialize</span>
<span class="linenos"> 5</span>        <span class="vi">@mailer</span> <span class="o">=</span> <span class="no">MailerMonkey</span><span class="o">.</span><span class="n">new</span>
<span class="linenos"> 6</span>    <span class="k">end</span>
<span class="linenos"> 7</span><span class="k">end</span>
<span class="linenos"> 8</span><span class="c1"># in RottenPotatoes EmailListController:</span>
<span class="linenos"> 9</span><span class="k">def</span> <span class="nf">advertise_discount_for_movie</span>
<span class="linenos">10</span>    <span class="n">moviegoers</span> <span class="o">=</span> <span class="no">Moviegoer</span><span class="o">.</span><span class="n">interested_in</span> <span class="n">params</span><span class="o">[</span><span class="ss">:movie_id</span><span class="o">]</span>
<span class="linenos">11</span>    <span class="no">EmailList</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send_email_to</span> <span class="n">moviegoers</span>
<span class="linenos">12</span><span class="k">end</span>
</pre></div>
</div>
<p>Suppose the feature is so successful that you decide to extend the mechanism so that
moviegoers who are on the Amiko social network can opt to have these emails forwarded
to their Amiko friends as well, using the new <span class="math notranslate nohighlight">\(\text{Amiko}\)</span> gem that wraps Amiko’s RESTful API
for friend lists, posting on walls, messaging, and so on. There are two problems, however.</p>
<p>First, <code class="code docutils literal notranslate"><span class="pre">EmailList#initialize</span></code> has a hardcoded dependency on <span class="math notranslate nohighlight">\(\text{MailerMonkey}\)</span>, but now we will
sometimes need to use <span class="math notranslate nohighlight">\(\text{Amiko}\)</span> instead. This runtime variation is the problem solved by dependency
injection—since we won’t know until runtime which type of mailer we’ll need, we modify
<code class="code docutils literal notranslate"><span class="pre">EmailList#initialize</span></code> so we can “inject” the correct value at runtime:</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">EmailList</span>
<span class="linenos"> 2</span>    <span class="kp">attr_reader</span> <span class="ss">:mailer</span>
<span class="linenos"> 3</span>    <span class="n">delegate</span> <span class="ss">:send_email</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:mailer</span>
<span class="linenos"> 4</span>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">mailer_type</span><span class="p">)</span>
<span class="linenos"> 5</span>        <span class="vi">@mailer</span> <span class="o">=</span> <span class="n">mailer_type</span><span class="o">.</span><span class="n">new</span>
<span class="linenos"> 6</span>    <span class="k">end</span>
<span class="linenos"> 7</span><span class="k">end</span>
<span class="linenos"> 8</span><span class="c1"># in RottenPotatoes EmailListController:</span>
<span class="linenos"> 9</span><span class="k">def</span> <span class="nf">advertise_discount_for_movie</span>
<span class="linenos">10</span>    <span class="n">moviegoers</span> <span class="o">=</span> <span class="no">Moviegoer</span><span class="o">.</span><span class="n">interested_in</span> <span class="n">params</span><span class="o">[</span><span class="ss">:movie_id</span><span class="o">]</span>
<span class="linenos">11</span>    <span class="n">mailer</span> <span class="o">=</span> <span class="k">if</span> <span class="no">Config</span><span class="o">.</span><span class="n">has_amiko?</span> <span class="k">then</span> <span class="no">Amiko</span> <span class="k">else</span> <span class="no">MailerMonkey</span> <span class="k">end</span>
<span class="linenos">12</span>    <span class="no">EmailList</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mailer</span><span class="p">)</span><span class="o">.</span><span class="n">send_email_to</span> <span class="n">moviegoers</span>
<span class="linenos">13</span><span class="k">end</span>
</pre></div>
</div>
<p>You can think of DIP as injecting an additional seam between two classes, and indeed,
in statically compiled languages DIP helps with testability. This benefit is less apparent
in Ruby, since as we’ve seen we can create seams almost anywhere we want at runtime using
mocking or stubbing in conjunction with Ruby’s dynamic language features.</p>
<p>The second problem is that <span class="math notranslate nohighlight">\(\text{Amiko}\)</span> exposes a different and more complex API than the
simple <code class="code docutils literal notranslate"><span class="pre">send_email</span></code> method provided by <span class="math notranslate nohighlight">\(\text{MailerMonkey}\)</span> (to which <code class="code docutils literal notranslate"><span class="pre">EmailList#send_email</span></code> delegates
in line 3), yet our controller method is already set up to call send_email on the mailer
object. The <strong>Adapter pattern</strong> can help us here: it’s designed to convert an existing API into
one that’s compatible with an existing caller. In this case, we can define a new class
<span class="math notranslate nohighlight">\(\text{AmikoAdapter}\)</span> that converts the more complex Amiko API into the simpler one that our controller
expects, by providing the same <code class="code docutils literal notranslate"><span class="pre">send_email</span></code> method that <span class="math notranslate nohighlight">\(\text{MailerMonkey}\)</span> provides:</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">AmikoAdapter</span>
<span class="linenos"> 2</span>    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">;</span> <span class="vi">@amiko</span> <span class="o">=</span> <span class="no">Amiko</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">...</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 3</span>    <span class="k">def</span> <span class="nf">send_email</span>
<span class="linenos"> 4</span>        <span class="vi">@amiko</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
<span class="linenos"> 5</span>        <span class="vi">@amiko</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
<span class="linenos"> 6</span>    <span class="k">end</span>
<span class="linenos"> 7</span><span class="k">end</span>
<span class="linenos"> 8</span><span class="c1"># Change the controller method to use the adapter:</span>
<span class="linenos"> 9</span><span class="k">def</span> <span class="nf">advertise_discount_for_movie</span>
<span class="linenos">10</span>    <span class="n">moviegoers</span> <span class="o">=</span> <span class="no">Moviegoer</span><span class="o">.</span><span class="n">interested_in</span> <span class="n">params</span><span class="o">[</span><span class="ss">:movie_id</span><span class="o">]</span>
<span class="linenos">11</span>    <span class="n">mailer</span> <span class="o">=</span> <span class="k">if</span> <span class="no">Config</span><span class="o">.</span><span class="n">has_amiko?</span> <span class="k">then</span> <span class="no">AmikoAdapter</span> <span class="k">else</span> <span class="no">MailerMonkey</span> <span class="k">end</span>
<span class="linenos">12</span>    <span class="no">EmailList</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mailer</span><span class="p">)</span><span class="o">.</span><span class="n">send_email_to</span> <span class="n">moviegoers</span>
<span class="linenos">13</span><span class="k">end</span>
</pre></div>
</div>
<p>When the Adapter pattern not only converts an existing API but also simplifies it—for
example, the <span class="math notranslate nohighlight">\(\text{Amiko}\)</span> gem also provides many other Amiko functions unrelated to email, but
AmikoAdapter only “adapts” the email-specific part of that API—it is sometimes called
the <strong>Façade pattern</strong>.</p>
<p>Lastly, even in cases where the email strategy is known when the app starts up, what if we
want to disable email sending altogether from time to time? Figure 11.19 (top) shows a naive
approach: we have moved the logic for determining which emailer to use into a new <span class="math notranslate nohighlight">\(\text{Config}\)</span> class,
but we still have to “condition out” the email-sending logic in the controller method if email
is disabled. But if there are other places in the app where a similar check must be performed,
the same condition logic would have to be replicated there (shotgun surgery). A better
alternative is the <strong>Null Object pattern</strong>, in which we create a “dummy” object that has all the
same behaviors as a real object but doesn’t do anything when those behaviors are called. Figure
11.19 (bottom) applies the Null Object pattern to this example, avoiding the proliferation of
conditionals throughout the code.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">Config</span>
<span class="linenos"> 2</span>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">email_enabled?</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 3</span>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">emailer</span> <span class="p">;</span> <span class="k">if</span> <span class="n">has_amiko?</span> <span class="k">then</span> <span class="no">Amiko</span> <span class="k">else</span> <span class="no">MailerMonkey</span> <span class="k">end</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 4</span><span class="k">end</span>
<span class="linenos"> 5</span><span class="k">def</span> <span class="nf">advertise_discount_for_movie</span>
<span class="linenos"> 6</span>    <span class="k">if</span> <span class="no">Config</span><span class="o">.</span><span class="n">email_enabled?</span>
<span class="linenos"> 7</span>        <span class="n">moviegoers</span> <span class="o">=</span> <span class="no">Moviegoer</span><span class="o">.</span><span class="n">interested_in</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:movie_id</span><span class="o">]</span><span class="p">)</span>
<span class="linenos"> 8</span>        <span class="no">EmailList</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Config</span><span class="o">.</span><span class="n">emailer</span><span class="p">)</span><span class="o">.</span><span class="n">send_email_to</span><span class="p">(</span><span class="n">moviegoers</span><span class="p">)</span>
<span class="linenos"> 9</span>    <span class="k">end</span>
<span class="linenos">10</span><span class="k">end</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">Config</span>
<span class="linenos"> 2</span>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">emailer</span>
<span class="linenos"> 3</span>        <span class="k">if</span> <span class="n">email_disabled?</span> <span class="k">then</span> <span class="no">NullMailer</span> <span class="k">else</span>
<span class="linenos"> 4</span>            <span class="k">if</span> <span class="n">has_amiko?</span> <span class="k">then</span> <span class="no">AmikoAdapter</span> <span class="k">else</span> <span class="no">MailerMonkey</span> <span class="k">end</span>
<span class="linenos"> 5</span>        <span class="k">end</span>
<span class="linenos"> 6</span>    <span class="k">end</span>
<span class="linenos"> 7</span><span class="k">end</span>
<span class="linenos"> 8</span><span class="k">class</span> <span class="nc">NullMailer</span>
<span class="linenos"> 9</span>    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos">10</span>    <span class="k">def</span> <span class="nf">send_email</span> <span class="p">;</span> <span class="kp">true</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos">11</span><span class="k">end</span>
<span class="linenos">12</span><span class="k">def</span> <span class="nf">advertise_discount_for_movie</span>
<span class="linenos">13</span>    <span class="n">moviegoers</span> <span class="o">=</span> <span class="no">Moviegoer</span><span class="o">.</span><span class="n">interested_in</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:movie_id</span><span class="o">]</span><span class="p">)</span>
<span class="linenos">14</span>    <span class="no">EmailList</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Config</span><span class="o">.</span><span class="n">emailer</span><span class="p">)</span><span class="o">.</span><span class="n">send_email_to</span><span class="p">(</span><span class="n">moviegoers</span><span class="p">)</span>
<span class="linenos">15</span><span class="k">end</span>
</pre></div>
</div>
<p>Figure 11.20 shows the UML class diagrams corresponding to the various versions of our
DIP example.</p>
<p>An interesting relative of the Adapter and Façade patterns is the <strong>Proxy pattern</strong>, in which
one object “stands in” for another that has the same API. The client talks to the proxy
instead of the original object; the proxy may forward some requests directly to the original
object (that is, delegate them) but may take other actions on different requests, perhaps
for reasons of performance or efficiency.</p>
<p>Two classic examples of this pattern are found in ActiveRecord itself. First, the object
returned by ActiveRecord’s <code class="code docutils literal notranslate"><span class="pre">all</span></code>, <code class="code docutils literal notranslate"><span class="pre">where</span></code> and <code class="code docutils literal notranslate"><span class="pre">find</span></code>-based methods quacks like a collection, but
it’s actually a proxy object that doesn’t even do the query until you force the issue by asking
for one of the collection’s elements. That is why you can build up complex queries with multiple
<code class="code docutils literal notranslate"><span class="pre">where</span></code>s without paying the cost of doing the query each time. The second is when you use
ActiveRecord’s associations (Section 5.4: the result of evaluating <code class="code docutils literal notranslate"><span class="pre">&#64;movie.reviews</span></code> quacks like
an enumerable collection, but it’s actually a proxy object that responds to all the collection
methods (<code class="code docutils literal notranslate"><span class="pre">size</span></code>, <code class="code docutils literal notranslate"><span class="pre">&lt;&lt;</span></code>, and so on), without querying the database except when it has to. Another
example of a use for the proxy pattern would be for sending email while disconnected from
the Internet. If the real Internet-based email service is accessed via a send_email method, a
proxy object could provide a <code class="code docutils literal notranslate"><span class="pre">send_email</span></code> method that just stores an email on the local disk
until the next time the computer is connected to the Internet. This proxy shields the client
(email GUI) from having to change its behavior when the user isn’t connected.</p>
<p><strong>Self-Check 11.6.1.</strong> <em>Why does proper use of DIP have higher impact in statically
typed languages?</em></p>
<blockquote>
<div><p>In such languages, you cannot create a runtime seam to override a “hardwired” behavior as
you can in dynamic languages like Ruby, so the seam must be provided in advance by
injecting the dependency.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="/chapter/11/section/5" title="previous page"><span class="section-number">11.5. </span>Liskov Substitution Principle</a>
    <a class='right-next' id="next-link" href="/chapter/11/section/7" title="next page"><span class="section-number">11.7. </span>Demeter Principle</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>