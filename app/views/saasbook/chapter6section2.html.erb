
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>6.2. Introducing ECMAScript &#8212; saasbook  documentation</title>
    
  <link href="esaasbook/app/assets/stylesheets/_static/css/theme.css" rel="stylesheet" />
  <link href="esaasbook/app/assets/stylesheets/_static/css/index.c5995385ac14fb8791e8eb36b4908be2.css" rel="stylesheet" />

    
  <link rel="stylesheet"
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/css/all.min.css">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    <link rel="stylesheet" type="text/css" href="esaasbook/app/assets/stylesheets/_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.acff12b8f9c144ce68a297486a2fa670.css" />
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="6.3. Classes, Functions and Constructors" href="3" />
    <link rel="prev" title="6.1. JavaScript: The Big Picture" href="1" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          
<div class="col-12 col-md-3 bd-sidebar site-navigation show" id="site-navigation">
    
        <div class="navbar-brand-box">
    <a class="navbar-brand text-wrap" href="../..">
      
      
      <h1 class="site-logo" id="site-title">saasbook  documentation</h1>
      
    </a>
</div><form class="bd-search d-flex align-items-center" action="../../search" method="get">
  <i class="icon fas fa-search"></i>
  <input type="search" class="form-control" name="q" id="search-input" placeholder="Search the docs ..." aria-label="Search the docs ..." autocomplete="off" >
</form><nav class="bd-links" id="bd-docs-nav" aria-label="Main navigation">
    <div class="bd-toc-item active">
        <ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../../../preface">
   Preface
  </a>
 </li>
</ul>
<ul class="current nav bd-sidenav">
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/1">
   1. Introduction to Software as a Service, Agile Development, and Cloud Computing
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-1" name="toctree-checkbox-1" type="checkbox"/>
  <label for="toctree-checkbox-1">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/1">
     1.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/2">
     1.2. Software Development Processes: Plan and Document
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/3">
     1.3. Software Development Processes: The Agile Manifesto
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/4">
     1.4. Software Quality Assurance: Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/5">
     1.5. Productivity: Conciseness, Synthesis, Reuse, and Tools
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/6">
     1.6. SaaS and Service Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/7">
     1.7. Deploying SaaS: Cloud Computing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/8">
     1.8. Deploying SaaS: Browsers and Mobile
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/9">
     1.9. Beautiful vs. Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/10">
     1.10. Guided Tour and How To Use This Book
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/11">
     1.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/12">
     1.12. Concluding Remarks: Software Engineering Is More Than Programming
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/2">
   2. How to Learn a New Language
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-2" name="toctree-checkbox-2" type="checkbox"/>
  <label for="toctree-checkbox-2">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/1">
     2.1. Prelude: Learning to Learn Languages and Frameworks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/2">
     2.2. Pair Programming
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/3">
     2.3. Introducing Ruby,an Object-Oriented Language
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/4">
     2.4. Ruby Idioms: Poetry Mode, Blocks, Duck Typing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/5">
     2.5. CHIPS: Ruby Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/6">
     2.6. Gems and Bundler: Library Management in Ruby
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/7">
     2.7. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/8">
     2.8. Concluding Remarks: How (Not) To Learn a Language By Googling
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/3">
   3. SaaS Application Architecture: Microservices, APIs, and REST
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-3" name="toctree-checkbox-3" type="checkbox"/>
  <label for="toctree-checkbox-3">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/1">
     3.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/2">
     3.2. SaaS Communication Uses HTTP Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/3">
     3.3. CHIPS: HTTP and URIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/4">
     3.4. From Web Sites to Microservices: Service-Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/5">
     3.5. RESTful APIs: Everything is a Resource
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/6">
     3.6. RESTful URIs, API Calls, and JSON
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/7">
     3.7. CHIPS: Create and Deploy a Simple SaaS App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/8">
     3.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/9">
     3.9. Concluding Remarks: Continuity From CGI to SOA
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/4">
   4. SaaS Framework: Rails as a Model–View–Controller Framework
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-4" name="toctree-checkbox-4" type="checkbox"/>
  <label for="toctree-checkbox-4">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/1">
     4.1. The Model–View–Controller (MVC) Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/2">
     4.2. Rails Models: Databases and Active Record
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/3">
     4.3. CHIPS: ActiveRecord Basics
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/4">
     4.4. Routes, Controllers, and Views
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/5">
     4.5. CHIPS: Rails Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/6">
     4.6. Forms
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/7">
     4.7. CHIPS: Hangperson on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/8">
     4.8. Debugging: When Things Go Wrong
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/9">
     4.9. CHIPS: Hello Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/10">
     4.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/11">
     4.11. Concluding Remarks: Rails as a Service Framework
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/5">
   5. SaaS Framework: Advanced Programming Abstractions for SaaS
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-5" name="toctree-checkbox-5" type="checkbox"/>
  <label for="toctree-checkbox-5">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/1">
     5.1. DRYing Out MVC: Partials, Validations and Filters
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/2">
     5.2. Single Sign-On and Third-Party Authentication
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/3">
     5.3. CHIPS: Rails Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/4">
     5.4. Associations and Foreign Keys
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/5">
     5.5. Through-Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/6">
     5.6. RESTful Routes for Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/7">
     5.7. CHIPS: Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/8">
     5.8. Other Types of Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/9">
     5.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/10">
     5.10. Concluding Remarks: Languages, Productivity, and Beauty
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 current active has-children">
  <a class="reference internal" href="..">
   6. Mobile and Desktop SaaS Clients: JavaScript Introduction
  </a>
  <input checked="" class="toctree-checkbox" id="toctree-checkbox-6" name="toctree-checkbox-6" type="checkbox"/>
  <label for="toctree-checkbox-6">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul class="current">
   <li class="toctree-l2">
    <a class="reference internal" href="1">
     6.1. JavaScript: The Big Picture
    </a>
   </li>
   <li class="toctree-l2 current active">
    <a class="current reference internal" href="#">
     6.2. Introducing ECMAScript
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="3">
     6.3. Classes, Functions and Constructors
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="4">
     6.4. The Document Object Model (DOM) and jQuery
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="5">
     6.5. The DOM and Accessibility
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="6">
     6.6. Events and Callbacks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="7">
     6.7. AJAX: Asynchronous JavaScript And XML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="8">
     6.8. Testing Java Script and AJAX
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="9">
     6.9. CHIPS: AJAX Enhancements to RottenPotatoes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="10">
     6.10. Single-Page Apps and JSON APIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="11">
     6.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="12">
     6.12. Concluding Remarks: JavaScript Past, Present and Future
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/7">
   7. Requirements: BDD and User Stories
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-7" name="toctree-checkbox-7" type="checkbox"/>
  <label for="toctree-checkbox-7">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/1">
     7.1. Behavior-Driven Design and User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/2">
     7.2. SMART User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/3">
     7.3. Lo-Fi User Interface Sketches and Storyboards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/4">
     7.4. Points and Velocity
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/5">
     7.5. Agile Cost Estimation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/6">
     7.6. Cucumber: From User Stories to Acceptance Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/7">
     7.7. CHIPS: Intro to BDD and Cucumber
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/8">
     7.8. Explicit vs. Implicit and Imperative vs. Declarative Scenarios
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/9">
     7.9. The Plan-And-Document Perspective on Documentation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/10">
     7.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/11">
     7.11. Concluding Remarks: Pros and Cons of BDD
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/8">
   8. Testing: Test-Driven Development
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-8" name="toctree-checkbox-8" type="checkbox"/>
  <label for="toctree-checkbox-8">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/1">
     8.1. FIRST, TDD, and Red–Green–Refactor
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/2">
     8.2. Anatomy of a Test Case: Arrange, Act, Assert
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/3">
     8.3. Isolating Code: Doubles and Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/4">
     8.4. Stubbing the Internet
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/5">
     8.5. CHIPS: Intro to RSpec on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/6">
     8.6. Fixtures and Factories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/7">
     8.7. Coverage Concepts and Types of Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/8">
     8.8. Other Testing Approaches and Terminology
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/9">
     8.9. CHIPS:The Acceptance Test/Unit Test Cycle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/10">
     8.10. The Plan-And-Document Perspective on Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/11">
     8.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/12">
     8.12. Concluding Remarks: TDD vs. Conventional Debugging
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/9">
   9. Software Maintenance: Enhancing Legacy Software Using Refactoring and Agile Methods
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-9" name="toctree-checkbox-9" type="checkbox"/>
  <label for="toctree-checkbox-9">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/1">
     9.1. What Makes Code “Legacy” and How Can Agile Help?
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/2">
     9.2. Exploring a Legacy Codebase
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/3">
     9.3. Establishing Ground Truth With Characterization Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/4">
     9.4. Comments and Commits: Documenting Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/5">
     9.5. Metrics, CodeSmells, and SOFA
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/6">
     9.6. Method-Level Refactoring: Replacing Dependencies With Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/7">
     9.7. The Plan-And-Document Perspective on Working With Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/8">
     9.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/9">
     9.9. Concluding Remarks: Continuous Refactoring
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/10">
   10. Agile Teams
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-10" name="toctree-checkbox-10" type="checkbox"/>
  <label for="toctree-checkbox-10">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/1">
     10.1. It Takes a Team: Two-Pizza and Scrum
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/2">
     10.2. Using Branches Effectively
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/3">
     10.3. Pull Requests and Code Reviews
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/4">
     10.4. Delivering the Backlog Using Continuous Integration
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/5">
     10.5. CHIPS: Agile Iterations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/6">
     10.6. Reporting and Fixing Bugs: The Five R’s
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/7">
     10.7. The Plan-And-Document Perspective on Managing Teams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/8">
     10.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/9">
     10.9. Concluding Remarks: From Solo Developer to Teams of Teams
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/11">
   11. Design Patterns for SaaS Apps
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-11" name="toctree-checkbox-11" type="checkbox"/>
  <label for="toctree-checkbox-11">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/1">
     11.1. Patterns, Antipatterns, and SOLID Class Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/2">
     11.2. Just Enough UML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/3">
     11.3. Single Responsibility Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/4">
     11.4. Open/Closed Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/5">
     11.5. Liskov Substitution Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/6">
     11.6. Dependency Injection Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/7">
     11.7. Demeter Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/8">
     11.8. The Plan-And-Document Perspective on Design Patterns
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/9">
     11.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/10">
     11.10. Concluding Remarks: Frameworks Capture Design Patterns
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/12">
   12. Dev/Ops
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-12" name="toctree-checkbox-12" type="checkbox"/>
  <label for="toctree-checkbox-12">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/1">
     12.1. From Development to Deployment
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/2">
     12.2. Three-Tier Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/3">
     12.3. Responsiveness, Service Level Objectives, and Apdex
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/4">
     12.4. Releases and Feature Flags
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/5">
     12.5. Monitoring and Finding Bottlenecks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/6">
     12.6. Improving Rendering and Database Performance With Caching
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/7">
     12.7. Avoiding Abusive Database Queries
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/8">
     12.8. CHIPS: Exploiting Caching and Indices
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/9">
     12.9. Security: Defending Customer Data in Your App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/10">
     12.10. The Plan-And-Document Perspective on Operations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/11">
     12.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/12">
     12.12. Concluding Remarks: Beyond PaaS Basics
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/13">
   13. Afterword
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-13" name="toctree-checkbox-13" type="checkbox"/>
  <label for="toctree-checkbox-13">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/1">
     13.1. Looking Backwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/2">
     13.2. Looking Forwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/3">
     13.3. Essential Readings
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/4">
     13.4. Last Words
    </a>
   </li>
  </ul>
 </li>
</ul>

    </div>
</nav> <!-- To handle the deprecated key -->

<div class="navbar_extra_footer">
  Theme by the <a href="https://ebp.jupyterbook.org">Executable Book Project</a>
</div>

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part1/chapter6/sub-chapter2.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="introducing-ecmascript">
<h1><span class="section-number">6.2. </span>Introducing ECMAScript<a class="headerlink" href="#introducing-ecmascript" title="Permalink to this headline">¶</a></h1>
<blockquote>
<div><p><em>Stop me if you think you’ve heard this before.</em></p>
<p class="attribution">—variously attributed</p>
</div></blockquote>
<p>Our fast-paced introduction to JavaScript follows the same structure proposed in Section 2.1 and used in Section 2.3
to introduce Ruby. We’ll first review the things that are fairly standard about the language—syntax, types and names,
control flow, and so on, as Figure 6.2 summarizes. We then introduce the idioms that are central to using the language
but less common: prototypes, first-class functions, and higher-order functions. An excellent resource to lend depth
to this brief overview is the JavaScript documentation maintained by the Mozilla Developer Network.</p>
<p><strong>Types and typing.</strong> Almost everything is an object. There are only a few primitive (built-in) types: String, Number
(64-bit double precision floating point), <code class="code docutils literal notranslate"><span class="pre">undefined</span></code> (having no value), <code class="code docutils literal notranslate"><span class="pre">null</span></code> (a specific value different from <code class="code docutils literal notranslate"><span class="pre">undefined</span></code>),
Boolean (either <code class="code docutils literal notranslate"><span class="pre">true</span></code> or <code class="code docutils literal notranslate"><span class="pre">false</span></code>), and BigInt (rarely needed, for expressing integers of arbitrary magnitude that would
overflow the <code class="code docutils literal notranslate"><span class="pre">Number</span></code> type). There is a new <code class="code docutils literal notranslate"><span class="pre">Symbol</span></code> type (which behaves similar to Ruby’s).</p>
<p>The most important compound type is Object, which is a collection of unordered key/value pairs; the keys are called
<em>properties</em> or sometimes <em>slots</em>. JavaScript objects look and behave like Ruby hashes except that the property names must
be strings, although JavaScript syntax allows omitting quotes around those strings under some circumstances. Properties
can be added or removed after an object is created.</p>
<p>Finally, JavaScript has <code class="code docutils literal notranslate"><span class="pre">Array`s</span> <span class="pre">that</span> <span class="pre">can</span> <span class="pre">be</span> <span class="pre">indexed</span> <span class="pre">numerically,</span> <span class="pre">but</span> <span class="pre">they</span> <span class="pre">are</span> <span class="pre">actually</span> <span class="pre">implemented</span> <span class="pre">as</span> <span class="pre">objects</span> <span class="pre">(hashes)</span> <span class="pre">in</span>
<span class="pre">which</span> <span class="pre">there</span> <span class="pre">is</span> <span class="pre">a</span> <span class="pre">particular</span> <span class="pre">relationship</span> <span class="pre">between</span> <span class="pre">property</span> <span class="pre">names</span> <span class="pre">that</span> <span class="pre">are</span> <span class="pre">integers</span> <span class="pre">and</span> <span class="pre">the</span> <span class="pre">array’s</span> <span class="pre">:code:`length</span></code> property.</p>
<p><strong>Variables and Names.</strong> As in Ruby, variables don’t have types, but the objects they refer to do, so the same variable can
refer to objects of different types at different times (though that’s rarely a good idea). Variable names must start with
a letter, underscore, or dollar sign, and can also include digits, and idiomatically use <code class="code docutils literal notranslate"><span class="pre">UpperCamelCase</span></code> or <code class="code docutils literal notranslate"><span class="pre">lowerCamelCase</span></code>
naming. A variable declaration preceded by <code class="code docutils literal notranslate"><span class="pre">var</span></code> or <code class="code docutils literal notranslate"><span class="pre">let</span></code> declares and optionally initializes the variable, as in <code class="code docutils literal notranslate"><span class="pre">var</span> <span class="pre">s=&quot;Hello</span> <span class="pre">world&quot;</span></code>,
and sets the scope of that variable to be its enclosing block. Unlike Ruby, but like C, JavaScript allows blocks of code
to be nested; a variable declared with var is visible to blocks nested inside the one in which it’s declared, whereas a
variable declared with let is not. If your functions are short (as Chapter 9.5 suggests)</p>
<p>Functions are closures that carry their environment around with them, allowing them to execute properly at a different place
and time than where they were defined. Just as anonymous blocks <code class="code docutils literal notranslate"><span class="pre">(do...end)</span></code> are ubiquitous in Ruby, anonymous functions
<code class="code docutils literal notranslate"><span class="pre">(function()</span> <span class="pre">{...})</span></code> are ubiquitous in JavaScript. Classes and types matter even less than they do in Ruby—in fact, despite
the syntactic appearance of much JavaScript code in the wild, JavaScript does not have classes that behave the way they
would in class-oriented OO languages like Ruby and Java, despite the appearance of the new class keyword in ECMAScript 6.</p>
<p>Figure 6.2 shows JavaScript’s basic syntax and constructs, which should look familiar to Java and Ruby programmers. The
Fallacies &amp; Pitfalls section describes several JavaScript pitfalls associated with the figure; read them carefully after
you’ve finished this chapter, or you may find yourself banging your head against one of JavaScript’s unfortunate misfeatures
or a JavaScript mechanism that looks and works almost but not quite like its Ruby counterpart. For example, whereas Ruby
uses nil to mean both “undefined” (a variable that has never been given a value) and “empty” (a value that is always false),
JavaScript’s null is distinct from its <code class="code docutils literal notranslate"><span class="pre">undefined</span></code>, which is what you get as the “value” of a variable that has never been
initialized.</p>
<p>As the first row of Figure 6.2 shows, JavaScript’s fundamental type is the <code class="code docutils literal notranslate"><span class="pre">object</span></code>, an
unordered collection of key/value pairs, or as they are called in JavaScript, <em>properties</em> or <em>slots</em>. The name of a
property can be any string, including the empty string. The value of a property can be any JavaScript expression,
including another object; it cannot be undefined.</p>
<div class="highlight-javascript notranslate"><div class="highlight"><pre><span></span><span class="kd">let</span> <span class="nx">potatoReview</span> <span class="o">=</span>
<span class="p">{</span>
    <span class="s2">&quot;potatoes&quot;</span><span class="o">:</span> <span class="mf">5</span><span class="p">,</span>
    <span class="s2">&quot;reviewer&quot;</span><span class="o">:</span> <span class="s2">&quot;armandofox&quot;</span><span class="p">,</span>
    <span class="s2">&quot;movie&quot;</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Casablanca&quot;</span><span class="p">,</span>
        <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Casablanca is a classic and iconic film starring ...&quot;</span><span class="p">,</span>
        <span class="s2">&quot;rating&quot;</span><span class="o">:</span> <span class="s2">&quot;PG&quot;</span><span class="p">,</span>
        <span class="s2">&quot;release_date&quot;</span><span class="o">:</span> <span class="s2">&quot;1942-11-26T07:00:00Z&quot;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="nx">potatoReview</span><span class="p">[</span><span class="s1">&#39;potatoes&#39;</span><span class="p">]</span> <span class="c1">// =&gt; 5</span>
<span class="nx">potatoReview</span><span class="p">[</span><span class="s1">&#39;movie&#39;</span><span class="p">].</span><span class="nx">title</span> <span class="c1">// =&gt; &quot;Casablanca&quot;</span>
<span class="nx">potatoReview</span><span class="p">.</span><span class="nx">movie</span><span class="p">.</span><span class="nx">title</span> <span class="c1">// =&gt; &quot;Casablanca&quot;</span>
<span class="nx">potatoReview</span><span class="p">[</span><span class="s1">&#39;movie&#39;</span><span class="p">][</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="c1">// =&gt; &quot;Casablanca&quot;</span>
<span class="nx">potatoReview</span><span class="p">[</span><span class="s1">&#39;blah&#39;</span><span class="p">]</span> <span class="c1">// =&gt; undefined</span>
</pre></div>
</div>
<p>JavaScript allows you to express <em>object literals</em> by specifying their properties and values directly, as Figure 6.3 shows.
This simple object-literal syntax is the basis of <strong>JSON</strong>, or JavaScript Object Notation, which we introduced in Section 3.6.
Despite its name, JSON has become a language-independent way to represent data that can be exchanged between SaaS services
or between a SaaS client and server. In fact, lines 2–11 in the figure (minus the trailing semicolon on line 11) are a
legal JSON representation. Officially, each property value in a JSON object can be a <code class="code docutils literal notranslate"><span class="pre">Number</span></code>, Unicode <code class="code docutils literal notranslate"><span class="pre">String</span></code>, Boolean
(<code class="code docutils literal notranslate"><span class="pre">true</span></code> or <code class="code docutils literal notranslate"><span class="pre">false</span></code> are the only possible values), <code class="code docutils literal notranslate"><span class="pre">null</span></code> (empty value), or a nested <code class="code docutils literal notranslate"><span class="pre">Object</span></code> recursively defined. Unlike full
JavaScript, though, in the JSON representation of an object all strings <em>must</em> be quoted, so the example in the top row
of Figure 6.2 would need quotes around the word <code class="code docutils literal notranslate"><span class="pre">title</span></code> to comply with JSON syntax. Figure 6.4 summarizes a variety of
tools for checking the syntax and style of both JavaScript code and JavaScript-related data structures and protocols
that we’ll meet in the rest of this chapter.</p>
<p>The fact that a JavaScript object can have function-valued properties is used by well-engineered libraries to collect
all their functions and variables into a single <strong>namespace</strong>. For example, as we’ll see in Section 6.4, jQuery defines a
single global variable jQuery through which all features of the jQuery library are accessed, rather than littering the
global namespace with the many objects in the library. We will follow a similar practice by defining a small number of
global variables to encapsulate all our JavaScript code.</p>
<p>The term <em>client-side JavaScript</em> refers specifically to JavaScript code that is associated with HTML pages and therefore
runs in the browser. Each page in your app that wants to use JavaScript functions or variables must include the necessary
JavaScript code itself. The recommended and unobtrusive way to do this is using a <code class="code docutils literal notranslate"><span class="pre">script</span></code> tag referencing the file containing
the code, as Figure 6.5 shows. The Rails view helper <code class="code docutils literal notranslate"><span class="pre">javascript_include_tag</span> <span class="pre">’application’</span></code>, which generates the above tag,
can be placed in your <code class="code docutils literal notranslate"><span class="pre">app/views/layouts/application.html.erb</span></code> or other layout template
that is part of every page served by your app. If you then place your code in one or more separate <code class="code docutils literal notranslate"><span class="pre">.js</span></code> files in
<code class="code docutils literal notranslate"><span class="pre">app/assets/javascripts</span></code>, when you deploy to production Rails will do the following steps automatically:</p>
<ol class="arabic simple">
<li><p>Concatenate the contents of all JavaScript files in this directory;</p></li>
<li><p>Compress the result by removing blank space and performing other simple transformations (the <code class="code docutils literal notranslate"><span class="pre">uglifier</span></code> gem);</p></li>
<li><p>Place the result in a single large file in the <code class="code docutils literal notranslate"><span class="pre">public</span></code> subdirectory that will be served directly by the presentation tier with no Rails intervention;</p></li>
<li><p>Adjust the URLs emitted by <code class="code docutils literal notranslate"><span class="pre">javascript_include_tag</span></code> so that the user’s browser loads not only your own JavaScript files but also the jQuery library.</p></li>
</ol>
<div class="highlight-html notranslate"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;/public/javascripts/application.js&quot;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</pre></div>
</div>
<div class="highlight-html notranslate"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Update Address<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="c">&lt;!-- BAD: embedding scripts directly in page, esp. in body --&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="c">&lt;!--</span> <span class="c1">// BAD: &quot;hide&quot; script body in HTML comment</span>
            <span class="c1">// (modern browsers may not see script at all)</span>
        <span class="kd">function</span> <span class="nx">checkValid</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// BAD: checkValid is global</span>
            <span class="k">if</span> <span class="o">!</span><span class="p">(</span><span class="nx">fieldsValid</span><span class="p">(</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;addr&#39;</span><span class="p">)))</span> <span class="p">{</span>
            <span class="c1">// BAD: &gt; and &lt; may confuse browser&#39;s HTML parser</span>
            <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;&gt;&gt;&gt; Please fix errors &amp; resubmit. &lt;&lt;&lt;&#39;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// BAD: &quot;hide&quot; end of HTML comment (l.3) in JS comment: --&gt;</span>
        <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="c">&lt;!-- BAD: using HTML attributes for JS event handlers --&gt;</span>
        <span class="p">&lt;</span><span class="nt">form</span> <span class="na">onsubmit</span><span class="o">=</span><span class="s">&quot;return checkValid()&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;addr&quot;</span> <span class="na">action</span><span class="o">=</span><span class="s">&quot;/update&quot;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">onchange</span><span class="o">=</span><span class="s">&quot;RP.filter_adult&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;checkbox&quot;</span><span class="p">/&gt;</span>
            <span class="c">&lt;!-- BAD: URL using &#39;javascript:&#39; --&gt;</span>
            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;javascript:back()&quot;</span><span class="p">&gt;</span>Go Back<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</pre></div>
</div>
<p>This automatic behavior, supported by modern production environments including Heroku, is called the <em>asset
pipeline</em>. Described more fully in this guide, the asset pipeline also allows us to use languages like
CoffeeScript, as we’ll see later. You might think it wasteful for the user’s browser to load a single enormous
JavaScript file, especially if only a few pages in your app use JavaScript and any given page only uses a small
subset of your JavaScript code. But the user’s browser only loads the large file once and then caches it until
you redeploy your app with changed .js files. Also, in development mode, the asset pipeline skips the “precompilation”
process and just loads each of the JavaScript files separately, since they’re likely to be changing frequently while
you’re developing.</p>
<p><strong>Self-Check 6.2.1.</strong> <em>Is every valid JSON object parsable by JavaScript? If not, give an example of
one that isn’t.</em></p>
<blockquote>
<div><p>Yes, every valid JSON object is a valid JavaScript object. Whereas JSON requires quotes around every slot name,
JavaScript sometimes does and sometimes doesn’t, but it is always safe to use quotes.</p>
</div></blockquote>
<p><strong>Self-Check 6.2.2.</strong> <em>If we make sure to put slot names in quotes, is every valid JavaScript object a valid JSON
object? If not, give an example of one that isn’t.</em></p>
<blockquote>
<div><p>No, even if all the slot names are quoted, some JavaScript objects are <em>not</em> valid JSON. For example, if one of
the object’s slots is a function, that object would not be valid JSON, since JSON slot values are limited to
simple types (numbers, strings, Booleans) and collections (arrays or other JSON objects).</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="1" title="previous page"><span class="section-number">6.1. </span>JavaScript: The Big Picture</a>
    <a class='right-next' id="next-link" href="3" title="next page"><span class="section-number">6.3. </span>Classes, Functions and Constructors</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>