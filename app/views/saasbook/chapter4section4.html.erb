
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>4.4. Routes, Controllers, and Views &#8212; saasbook  documentation</title>
    
  <%= stylesheet_link_tag "theme.css" %>
  <%= stylesheet_link_tag "index.c5995385ac14fb8791e8eb36b4908be2.css" %>

    
  
  <%= stylesheet_link_tag "all.min.css" %>
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
     <%= stylesheet_link_tag "pygments.css" %>
     <%= stylesheet_link_tag "sphinx-book-theme.acff12b8f9c144ce68a297486a2fa670.css" %>
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="4.5. CHIPS: Rails Routes" href="5" />
    <link rel="prev" title="4.3. CHIPS: ActiveRecord Basics" href="3" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          
<div class="col-12 col-md-3 bd-sidebar site-navigation show" id="site-navigation">
    
        <div class="navbar-brand-box">
    <a class="navbar-brand text-wrap" href="../..">
      
      
      <h1 class="site-logo" id="site-title">saasbook  documentation</h1>
      
    </a>
</div><form class="bd-search d-flex align-items-center" action="../../search" method="get">
  <i class="icon fas fa-search"></i>
  <input type="search" class="form-control" name="q" id="search-input" placeholder="Search the docs ..." aria-label="Search the docs ..." autocomplete="off" >
</form><nav class="bd-links" id="bd-docs-nav" aria-label="Main navigation">
    <div class="bd-toc-item active">
        <ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../../../preface">
   Preface
  </a>
 </li>
</ul>
<ul class="current nav bd-sidenav">
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/1">
   1. Introduction to Software as a Service, Agile Development, and Cloud Computing
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-1" name="toctree-checkbox-1" type="checkbox"/>
  <label for="toctree-checkbox-1">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/1">
     1.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/2">
     1.2. Software Development Processes: Plan and Document
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/3">
     1.3. Software Development Processes: The Agile Manifesto
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/4">
     1.4. Software Quality Assurance: Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/5">
     1.5. Productivity: Conciseness, Synthesis, Reuse, and Tools
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/6">
     1.6. SaaS and Service Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/7">
     1.7. Deploying SaaS: Cloud Computing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/8">
     1.8. Deploying SaaS: Browsers and Mobile
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/9">
     1.9. Beautiful vs. Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/10">
     1.10. Guided Tour and How To Use This Book
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/11">
     1.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/12">
     1.12. Concluding Remarks: Software Engineering Is More Than Programming
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/2">
   2. How to Learn a New Language
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-2" name="toctree-checkbox-2" type="checkbox"/>
  <label for="toctree-checkbox-2">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/1">
     2.1. Prelude: Learning to Learn Languages and Frameworks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/2">
     2.2. Pair Programming
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/3">
     2.3. Introducing Ruby,an Object-Oriented Language
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/4">
     2.4. Ruby Idioms: Poetry Mode, Blocks, Duck Typing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/5">
     2.5. CHIPS: Ruby Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/6">
     2.6. Gems and Bundler: Library Management in Ruby
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/7">
     2.7. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/8">
     2.8. Concluding Remarks: How (Not) To Learn a Language By Googling
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/3">
   3. SaaS Application Architecture: Microservices, APIs, and REST
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-3" name="toctree-checkbox-3" type="checkbox"/>
  <label for="toctree-checkbox-3">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/1">
     3.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/2">
     3.2. SaaS Communication Uses HTTP Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/3">
     3.3. CHIPS: HTTP and URIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/4">
     3.4. From Web Sites to Microservices: Service-Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/5">
     3.5. RESTful APIs: Everything is a Resource
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/6">
     3.6. RESTful URIs, API Calls, and JSON
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/7">
     3.7. CHIPS: Create and Deploy a Simple SaaS App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/8">
     3.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/9">
     3.9. Concluding Remarks: Continuity From CGI to SOA
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 current active has-children">
  <a class="reference internal" href="..">
   4. SaaS Framework: Rails as a Model–View–Controller Framework
  </a>
  <input checked="" class="toctree-checkbox" id="toctree-checkbox-4" name="toctree-checkbox-4" type="checkbox"/>
  <label for="toctree-checkbox-4">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul class="current">
   <li class="toctree-l2">
    <a class="reference internal" href="1">
     4.1. The Model–View–Controller (MVC) Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="2">
     4.2. Rails Models: Databases and Active Record
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="3">
     4.3. CHIPS: ActiveRecord Basics
    </a>
   </li>
   <li class="toctree-l2 current active">
    <a class="current reference internal" href="#">
     4.4. Routes, Controllers, and Views
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="5">
     4.5. CHIPS: Rails Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="6">
     4.6. Forms
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="7">
     4.7. CHIPS: Hangperson on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="8">
     4.8. Debugging: When Things Go Wrong
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="9">
     4.9. CHIPS: Hello Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="10">
     4.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="11">
     4.11. Concluding Remarks: Rails as a Service Framework
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/5">
   5. SaaS Framework: Advanced Programming Abstractions for SaaS
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-5" name="toctree-checkbox-5" type="checkbox"/>
  <label for="toctree-checkbox-5">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/1">
     5.1. DRYing Out MVC: Partials, Validations and Filters
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/2">
     5.2. Single Sign-On and Third-Party Authentication
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/3">
     5.3. CHIPS: Rails Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/4">
     5.4. Associations and Foreign Keys
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/5">
     5.5. Through-Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/6">
     5.6. RESTful Routes for Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/7">
     5.7. CHIPS: Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/8">
     5.8. Other Types of Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/9">
     5.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/10">
     5.10. Concluding Remarks: Languages, Productivity, and Beauty
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/6">
   6. Mobile and Desktop SaaS Clients: JavaScript Introduction
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-6" name="toctree-checkbox-6" type="checkbox"/>
  <label for="toctree-checkbox-6">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/1">
     6.1. JavaScript: The Big Picture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/2">
     6.2. Introducing ECMAScript
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/3">
     6.3. Classes, Functions and Constructors
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/4">
     6.4. The Document Object Model (DOM) and jQuery
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/5">
     6.5. The DOM and Accessibility
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/6">
     6.6. Events and Callbacks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/7">
     6.7. AJAX: Asynchronous JavaScript And XML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/8">
     6.8. Testing Java Script and AJAX
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/9">
     6.9. CHIPS: AJAX Enhancements to RottenPotatoes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/10">
     6.10. Single-Page Apps and JSON APIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/11">
     6.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/12">
     6.12. Concluding Remarks: JavaScript Past, Present and Future
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/7">
   7. Requirements: BDD and User Stories
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-7" name="toctree-checkbox-7" type="checkbox"/>
  <label for="toctree-checkbox-7">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/1">
     7.1. Behavior-Driven Design and User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/2">
     7.2. SMART User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/3">
     7.3. Lo-Fi User Interface Sketches and Storyboards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/4">
     7.4. Points and Velocity
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/5">
     7.5. Agile Cost Estimation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/6">
     7.6. Cucumber: From User Stories to Acceptance Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/7">
     7.7. CHIPS: Intro to BDD and Cucumber
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/8">
     7.8. Explicit vs. Implicit and Imperative vs. Declarative Scenarios
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/9">
     7.9. The Plan-And-Document Perspective on Documentation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/10">
     7.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/11">
     7.11. Concluding Remarks: Pros and Cons of BDD
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/8">
   8. Testing: Test-Driven Development
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-8" name="toctree-checkbox-8" type="checkbox"/>
  <label for="toctree-checkbox-8">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/1">
     8.1. FIRST, TDD, and Red–Green–Refactor
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/2">
     8.2. Anatomy of a Test Case: Arrange, Act, Assert
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/3">
     8.3. Isolating Code: Doubles and Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/4">
     8.4. Stubbing the Internet
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/5">
     8.5. CHIPS: Intro to RSpec on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/6">
     8.6. Fixtures and Factories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/7">
     8.7. Coverage Concepts and Types of Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/8">
     8.8. Other Testing Approaches and Terminology
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/9">
     8.9. CHIPS:The Acceptance Test/Unit Test Cycle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/10">
     8.10. The Plan-And-Document Perspective on Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/11">
     8.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/12">
     8.12. Concluding Remarks: TDD vs. Conventional Debugging
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/9">
   9. Software Maintenance: Enhancing Legacy Software Using Refactoring and Agile Methods
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-9" name="toctree-checkbox-9" type="checkbox"/>
  <label for="toctree-checkbox-9">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/1">
     9.1. What Makes Code “Legacy” and How Can Agile Help?
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/2">
     9.2. Exploring a Legacy Codebase
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/3">
     9.3. Establishing Ground Truth With Characterization Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/4">
     9.4. Comments and Commits: Documenting Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/5">
     9.5. Metrics, CodeSmells, and SOFA
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/6">
     9.6. Method-Level Refactoring: Replacing Dependencies With Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/7">
     9.7. The Plan-And-Document Perspective on Working With Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/8">
     9.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/9">
     9.9. Concluding Remarks: Continuous Refactoring
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/10">
   10. Agile Teams
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-10" name="toctree-checkbox-10" type="checkbox"/>
  <label for="toctree-checkbox-10">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/1">
     10.1. It Takes a Team: Two-Pizza and Scrum
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/2">
     10.2. Using Branches Effectively
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/3">
     10.3. Pull Requests and Code Reviews
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/4">
     10.4. Delivering the Backlog Using Continuous Integration
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/5">
     10.5. CHIPS: Agile Iterations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/6">
     10.6. Reporting and Fixing Bugs: The Five R’s
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/7">
     10.7. The Plan-And-Document Perspective on Managing Teams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/8">
     10.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/9">
     10.9. Concluding Remarks: From Solo Developer to Teams of Teams
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/11">
   11. Design Patterns for SaaS Apps
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-11" name="toctree-checkbox-11" type="checkbox"/>
  <label for="toctree-checkbox-11">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/1">
     11.1. Patterns, Antipatterns, and SOLID Class Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/2">
     11.2. Just Enough UML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/3">
     11.3. Single Responsibility Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/4">
     11.4. Open/Closed Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/5">
     11.5. Liskov Substitution Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/6">
     11.6. Dependency Injection Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/7">
     11.7. Demeter Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/8">
     11.8. The Plan-And-Document Perspective on Design Patterns
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/9">
     11.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/10">
     11.10. Concluding Remarks: Frameworks Capture Design Patterns
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/12">
   12. Dev/Ops
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-12" name="toctree-checkbox-12" type="checkbox"/>
  <label for="toctree-checkbox-12">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/1">
     12.1. From Development to Deployment
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/2">
     12.2. Three-Tier Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/3">
     12.3. Responsiveness, Service Level Objectives, and Apdex
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/4">
     12.4. Releases and Feature Flags
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/5">
     12.5. Monitoring and Finding Bottlenecks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/6">
     12.6. Improving Rendering and Database Performance With Caching
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/7">
     12.7. Avoiding Abusive Database Queries
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/8">
     12.8. CHIPS: Exploiting Caching and Indices
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/9">
     12.9. Security: Defending Customer Data in Your App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/10">
     12.10. The Plan-And-Document Perspective on Operations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/11">
     12.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/12">
     12.12. Concluding Remarks: Beyond PaaS Basics
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/13">
   13. Afterword
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-13" name="toctree-checkbox-13" type="checkbox"/>
  <label for="toctree-checkbox-13">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/1">
     13.1. Looking Backwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/2">
     13.2. Looking Forwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/3">
     13.3. Essential Readings
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/4">
     13.4. Last Words
    </a>
   </li>
  </ul>
 </li>
</ul>

    </div>
</nav> <!-- To handle the deprecated key -->

<div class="navbar_extra_footer">
  Theme by the <a href="https://ebp.jupyterbook.org">Executable Book Project</a>
</div>

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part1/chapter4/sub-chapter4.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="routes-controllers-and-views">
<h1><span class="section-number">4.4. </span>Routes, Controllers, and Views<a class="headerlink" href="#routes-controllers-and-views" title="Permalink to this headline">¶</a></h1>
<p>We’ve now been introduced to how Rails implements the models in MVC, but when users interact with a
SaaS app via a browser, they’re interacting with views and invoking controller actions, either by
typing URIs into their browser (resulting in an HTTP <code class="code docutils literal notranslate"><span class="pre">GET</span></code>) or interacting with page elements that
generate <code class="code docutils literal notranslate"><span class="pre">GET</span></code> requests (links) or <code class="code docutils literal notranslate"><span class="pre">POST</span></code> requests (forms). In this section we take a tour through views
and controllers to understand the lifecycle of such a request when it hits a Rails app. We first explore
the controllers and views corresponding to REST actions that only read model data: Index and Read. In
Section 4.6 we consider controllers and views corresponding to actions the modify data: Create, Update, and Delete.</p>
<p>As we know from Section 3.2, our app will receive a request in the form of an HTTP route. The first step in a
Rails app is therefore to determine which code in the app should be invoked to handle that route. Rails provides
a flexible routing subsystem that maps routes to specific Ruby methods in each controller using the contents of
the file <code class="code docutils literal notranslate"><span class="pre">config/routes.rb</span></code>. You can define any routes you like there, but if your app is RESTful (centered around
CRUD requests against a set of resources) and you abide by convention over configuration, the single line <code class="code docutils literal notranslate"><span class="pre">resources</span>
<span class="pre">’movies’</span></code> (in our case) defines a complete set of RESTful routes for a model (resource) called Movies, as Figure 4.4 shows.</p>
<p>Although “RESTful route and action” column in the table should look familiar from Sec- tion 3.2, we raise four
questions about it:</p>
<ol class="arabic simple">
<li><p>The four CRUD actions plus the Index action should only need five routes; why are there seven?</p></li>
<li><p>Most Web browsers can only generate HTTP <code class="code docutils literal notranslate"><span class="pre">GET</span></code> and <code class="code docutils literal notranslate"><span class="pre">POST</span></code> requests; how can a browser generate a route such as Update, which uses HTTP <code class="code docutils literal notranslate"><span class="pre">PUT</span></code>?</p></li>
<li><p>Some routes such as <code class="code docutils literal notranslate"><span class="pre">show</span></code> include a variable (parameter) as part of the route URI, and others such as <code class="code docutils literal notranslate"><span class="pre">create</span></code> must also provide the attribute values of the entity to be created as parameters. How are these parameters and their values made available to the controller action?</p></li>
<li><p>Finally, what are the “route helper methods” referred to in the table and why are they needed?</p></li>
</ol>
<p>The first question—why seven routes rather than five—is easy but subtle. We preview the answer here and will
return to it when we discuss HTML forms in Section 4.6. A RESTful request to create a movie would typically
include information about the movie itself—title, rating, and so on. But in a user-facing app, we need a way
to collect that information in- teractively from the user, usually by displaying a form the user can fill in.
Submitting the form would clearly correspond to the <code class="code docutils literal notranslate"><span class="pre">create</span></code> action, but what route describes <em>displaying</em> the form?
The Rails approach is to define a default RESTful route <code class="code docutils literal notranslate"><span class="pre">new</span></code> that displays whatever is necessary to allow collecting
information from the user in preparation for a <code class="code docutils literal notranslate"><span class="pre">create</span></code> request. A similar argument applies to <code class="code docutils literal notranslate"><span class="pre">update</span></code>, which requires
a way to show the user an editable version of the <em>existing</em> resource so the user can make changes; this latter
action is called <code class="code docutils literal notranslate"><span class="pre">edit</span></code> in rails, and typically displays a form pre-populated with the existing resource’s attribute values.</p>
<p>Turning to the second question, for historical reasons Web browsers only implement <code class="code docutils literal notranslate"><span class="pre">GET</span></code> (for following a link) and
<code class="code docutils literal notranslate"><span class="pre">POST</span></code> (for submitting forms). To compensate, Rails’ routing mechanism lets browsers use <code class="code docutils literal notranslate"><span class="pre">POST</span></code> for requests that normally
would require <code class="code docutils literal notranslate"><span class="pre">PUT</span></code> or <code class="code docutils literal notranslate"><span class="pre">DELETE</span></code>. Rails annotates the Web forms associated with such requests so that when the request is
submitted, Rails <em>internally</em> changes the HTTP method “seen” by the controller to <code class="code docutils literal notranslate"><span class="pre">PUT</span></code> or <code class="code docutils literal notranslate"><span class="pre">DELETE</span></code> as appropriate. The
result is that the Rails programmer can operate under the assumption that <code class="code docutils literal notranslate"><span class="pre">PUT</span></code> and <code class="code docutils literal notranslate"><span class="pre">DELETE</span></code> are actually supported,
even though browsers don’t implement them. As a result, the <em>same set of routes</em> can handle either requests coming
from a browser (that is, from a human being) or requests coming from another service in a SOA.</p>
<p>What about routes that include a parameter in the URI, such as show, or those that must also include parameters corresponding
to attribute values for a resource, such as <code class="code docutils literal notranslate"><span class="pre">create</span></code>? As we will see in the code examples in this section (and you will have an
opportunity to experiment with in the next CHIPS), the Rails routing subsystem prepares a hash called <code class="code docutils literal notranslate"><span class="pre">params[]</span></code> that is made
available to the controller. With the above <code class="code docutils literal notranslate"><span class="pre">routes.rb</span></code> file as part of an app, typing <code class="code docutils literal notranslate"><span class="pre">rake</span> <span class="pre">routes</span></code> at the command line
(within the root directory of your app) will list all the routes implied by that file, showing wildcard parameters with the
colon notation introduced in Section 3.5. For example, the route for show will appear as <code class="code docutils literal notranslate"><span class="pre">GET</span> <span class="pre">/movies/:id</span></code>, which tells us
that <code class="code docutils literal notranslate"><span class="pre">params[:id]</span></code> will hold the actual ID value parsed from the URI. Further, as we will see, Rails provides an easy way to
generate an HTML form in which the form fields are named in such a way that another value in <code class="code docutils literal notranslate"><span class="pre">params</span></code>, in this example
<code class="code docutils literal notranslate"><span class="pre">params[:movie]</span></code>, is itself a hash of key/value pairs corresponding to a <code class="code docutils literal notranslate"><span class="pre">Movie</span></code> object’s attributes and their desired values.
This mechanism sounds more confusing than it actually is, as the code examples below will show.</p>
<p>Finally, what are “route helpers”? By convention over configuration, the route URIs will match the resource name, but as we’ll
see later, you can override this behavior. You might, for example, decide later that you’d rather have your routes built
around <code class="code docutils literal notranslate"><span class="pre">film</span></code> rather than <code class="code docutils literal notranslate"><span class="pre">movie</span></code>. But then any view in your app that references the old-style movie route URIs—for example,
the page that serves the form allowing users to edit a movie’s info—would have to be changed to <code class="code docutils literal notranslate"><span class="pre">film</span></code>. This is the problem
that route helpers solve: they decouple what the
route does (create, read, and so on) from the actual route URI. As the table suggests, the Ruby method <code class="code docutils literal notranslate"><span class="pre">movies_path</span></code> will return
the correct URI for the route “list all movies,” <em>even if</em> the URI text itself is changed later (or for “create new movie,”
if <code class="code docutils literal notranslate"><span class="pre">POST</span></code> is used as the route’s verb). Similarly <code class="code docutils literal notranslate"><span class="pre">movie_path(23)</span></code> will always return the correct URI for “show movie ID 23”
(or update, edit, or destroy movie ID 23, depending on which HTTP verb is used). The route helpers also make explicit what
the route is supposed to do, improving readability.</p>
<p>What about the controller methods (called controller <em>actions</em> in Rails) that handle each RESTful operation? Once again,
convention over configuration comes to the rescue. By default, the routes created by <code class="code docutils literal notranslate"><span class="pre">resources</span> <span class="pre">’movies’</span></code> will expect to find
a file <code class="code docutils literal notranslate"><span class="pre">controllers/movies_controller.rb</span></code> that defines a class <code class="code docutils literal notranslate"><span class="pre">MoviesController</span></code> (which descends from the Rails-provided
<code class="code docutils literal notranslate"><span class="pre">ApplicationController</span></code>, just as models descend from ActiveRecord::Base). That class will be expected to define instance methods
<code class="code docutils literal notranslate"><span class="pre">index,</span> <span class="pre">new,</span> <span class="pre">create,</span> <span class="pre">show</span> <span class="pre">(read),</span> <span class="pre">edit,</span> <span class="pre">update,</span></code> and <code class="code docutils literal notranslate"><span class="pre">destroy,</span></code> corresponding to the RESTful actions of Figure 4.4.</p>
<p>Each of these controller actions generally follows a similar pattern:</p>
<ol class="arabic simple">
<li><p>Collect the information accompanying the RESTful request: parameters, resource IDs in the URI, and so on</p></li>
<li><p>Determine what ActiveRecord operations are necessary to fulfill the request.For example, the Index action might just require retrieving a list of all movies from the Movies table; the Update action might require identifying a resource ID from the URI, parsing the contents of a form, and using the form data to update the movie with the given ID (primary key); and so on.</p></li>
<li><p>Set instance variables for any information that will need to be displayed in the view, such as information retrieved from the database.</p></li>
<li><p>Render a view that will be returned as the result of the overall request.</p></li>
</ol>
<p>That leaves only the last bullet point: how does each controller action select a view, and how is the information generated
in the controller action made available to that view?</p>
<p>You should no longer be surprised to hear that part of the answer lies once again in convention over configuration.
Controller actions do not return a value; instead, when a con- troller action finishes executing, by default Rails will
identify and render a view named <code class="code docutils literal notranslate"><span class="pre">app/views/</span></code> <em>model-name</em> <code class="code docutils literal notranslate"><span class="pre">/action.html.erb</span></code>, for example <code class="code docutils literal notranslate"><span class="pre">app/views/movies/show.html.erb</span></code> for
the show action in <code class="code docutils literal notranslate"><span class="pre">MoviesController</span></code>. The Rails module that choreographs how views are handled is <code class="code docutils literal notranslate"><span class="pre">ActionView::Base</span></code>. This
view consists of HTML interspersed with Erb (Embedded Ruby) tags that allow the results of evaluating Ruby code to be
interpolated into the HTML view. In particular, any instance variables set in the controller method become available in
the view.</p>
<p>Re-reading the previous sentence should give you pause. Why would instance variables of one class (<code class="code docutils literal notranslate"><span class="pre">MoviesController</span></code>)
be accessible to an object of a completely different class (<code class="code docutils literal notranslate"><span class="pre">ActionView::Base</span></code>), violating all OOP orthodoxy? The simple
reason is that the designers of Rails thought it would make coding easier. What actually happens is that Rails creates
an instance of <code class="code docutils literal notranslate"><span class="pre">ActionView::Base</span></code> to handle rendering the view, and then uses Ruby’s metaprogramming facilities to “copy”
all of the controller’s instance variables into that new object!</p>
<ul class="simple">
<li><p>The controller code is in class <code class="code docutils literal notranslate"><span class="pre">MoviesController</span></code>, defined in <code class="code docutils literal notranslate"><span class="pre">app/controllers/movies_controller.rb</span></code> (note that the model’s class name is pluralized to form the controller file name.) Your app’s controllers all inherit from your app’s root controller <code class="code docutils literal notranslate"><span class="pre">ApplicationController</span></code> (in <code class="code docutils literal notranslate"><span class="pre">app/controllers/application_controller.rb</span></code>), which contains controller behaviors common to multiple controllers (we will meet some in Chapter 5 and in turn inherits from <code class="code docutils literal notranslate"><span class="pre">ActionController::Base</span></code>.</p></li>
<li><p>Each instance method of the controller is named using <code class="code docutils literal notranslate"><span class="pre">snake_lower_case</span></code> according to the RESTful action it handles, plus the two “pseudo-actions” <code class="code docutils literal notranslate"><span class="pre">new</span></code> and <code class="code docutils literal notranslate"><span class="pre">edit</span></code>.</p></li>
<li><p>The view template for each action is named the same as the controller method itself, so the view for Showing a movie would be in <code class="code docutils literal notranslate"><span class="pre">app/views/movies/show.html.erb</span></code>. Strangely but conveniently, each view has access to all the instance variables set in the controller actions.</p></li>
</ul>
<p>There’s one last thing to notice about these views: they aren’t legal HTML! In particular, they lack an HTML <code class="code docutils literal notranslate"><span class="pre">DOCTYPE,</span>
<span class="pre">&lt;html&gt;</span></code> element, and its main children <code class="code docutils literal notranslate"><span class="pre">&lt;head&gt;</span></code> and <code class="code docutils literal notranslate"><span class="pre">&lt;body&gt;</span></code>. In fact, we need to put those elements in <code class="code docutils literal notranslate"><span class="pre">views/application.html.erb</span></code>,
which “wraps” all views by default, as Figure 4.6 shows.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># This file is app/controllers/movies_controller.rb</span>
<span class="k">class</span> <span class="nc">MoviesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
    <span class="k">def</span> <span class="nf">index</span>
        <span class="vi">@movies</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">all</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">show</span>
        <span class="nb">id</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>            <span class="c1"># retrieve movie ID from URI route</span>
        <span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>     <span class="c1"># look up movie by unique ID</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="x">&lt;h1&gt;All Movies&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Add Movie&#39;</span><span class="p">,</span> <span class="n">new_movie_path</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;btn btn-primary&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>

<span class="x">&lt;div id=&quot;movies&quot;&gt;</span>
<span class="x">    &lt;div class=&quot;row&quot;&gt;</span>
<span class="x">        &lt;div class=&quot;col-8&quot;&gt;Movie Title&lt;/div&gt;</span>
<span class="x">        &lt;div class=&quot;col-2&quot;&gt;Rating&lt;/div&gt;</span>
<span class="x">        &lt;div class=&quot;col-2&quot;&gt;Release Date&lt;/div&gt;</span>
<span class="x">    &lt;/div&gt;</span>
<span class="cp">&lt;%-</span> <span class="vi">@movies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">movie</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    &lt;div class=&quot;row&quot;&gt;</span>
<span class="x">        &lt;div class=&quot;col-8&quot;&gt; </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">movie</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">movie_path</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"> &lt;/div&gt;</span>
<span class="x">        &lt;div class=&quot;col-2&quot;&gt; </span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">rating</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
<span class="x">        &lt;div class=&quot;col-2&quot;&gt; </span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">release_date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%F&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"> &lt;/div&gt;</span>
<span class="x">    &lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">&lt;/div&gt;</span>
</pre></div>
</div>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="x">&lt;h1&gt;Details about </span><span class="cp">&lt;%=</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x">&lt;/h1&gt;</span>

<span class="x">&lt;div id=&quot;metadata&quot;&gt;</span>
<span class="x">    &lt;ul id=&quot;details&quot;&gt;</span>
<span class="x">        &lt;li&gt; Rating: </span><span class="cp">&lt;%=</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">rating</span> <span class="cp">%&gt;</span><span class="x"> &lt;/li&gt;</span>
<span class="x">        &lt;li&gt; Released on: </span><span class="cp">&lt;%=</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">release_date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%F&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"> &lt;/li&gt;</span>
<span class="x">    &lt;/ul&gt;</span>
<span class="x">&lt;/div&gt;</span>

<span class="x">&lt;div id=&quot;description&quot;&gt;</span>
<span class="x">    &lt;h2&gt;Description:&lt;/h2&gt;</span>
<span class="x">    &lt;p&gt; </span><span class="cp">&lt;%=</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">description</span> <span class="cp">%&gt;</span><span class="x"> &lt;/p&gt;</span>
<span class="x">&lt;/div&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Edit this movie&#39;</span><span class="p">,</span> <span class="n">edit_movie_path</span><span class="p">(</span><span class="vi">@movie</span><span class="p">),</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;btn&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Back to movie list&#39;</span><span class="p">,</span> <span class="n">movies_path</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;btn btn-primary&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</pre></div>
</div>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="x">&lt;!DOCTYPE html&gt;</span>
<span class="x">    &lt;html&gt;</span>
<span class="x">    &lt;head&gt;</span>
<span class="x">        &lt;title&gt; RottenPotatoes! &lt;/title&gt;</span>
<span class="x">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://getbootstrap.com/docs/4.0/dist/css/bootstrap.min.css&quot;&gt;</span>
<span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="ss">:application</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">        </span><span class="cp">&lt;%=</span> <span class="n">csrf_meta_tags</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    &lt;/head&gt;</span>
<span class="x">    &lt;body&gt;</span>
<span class="x">        &lt;div class=&quot;container&quot;&gt;</span>
<span class="x">            </span><span class="cp">&lt;%-</span> <span class="k">if</span> <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">        &lt;div class=&quot;alert alert-info text-center&quot;&gt;</span><span class="cp">&lt;%=</span><span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span><span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
<span class="x">            </span><span class="cp">&lt;%-</span> <span class="k">elsif</span> <span class="n">flash</span><span class="o">[</span><span class="ss">:alert</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">        &lt;div class=&quot;alert alert-danger text-center&quot;&gt;</span><span class="cp">&lt;%=</span><span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span><span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
<span class="x">            </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">            </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">        &lt;/div&gt;</span>
<span class="x">    &lt;/body&gt;</span>
<span class="x">&lt;/html&gt;</span>
</pre></div>
</div>
<p><strong>Self-Check 4.4.1.</strong> <em>The route helper for Show or Update take an argument, as in</em> <code class="code docutils literal notranslate"><span class="pre">movie_path(&#64;movie),</span></code> <em>but the route helpers for
New and Create (</em> <code class="code docutils literal notranslate"><span class="pre">new_movie_path</span></code> and <code class="code docutils literal notranslate"><span class="pre">movies_path</span></code> <em>) do not. Why the difference?</em></p>
<blockquote>
<div><p>The argument to the Show and Update route helpers is either an existing <code class="code docutils literal notranslate"><span class="pre">Movie</span></code> instance or the ID (primary key) of an existing
instance. Show and Update operate on existing movies, so they take an argument to identify which movie to operate on.
New and Create operate on not-yet-existing movies.</p>
</div></blockquote>
<p><strong>Self-Check 4.4.2.</strong> <em>Why doesn’t the route helper movies_path for the Index action take an argument?
(Hint: The reason is slightly different than the answer to the previous question!)</em></p>
<blockquote>
<div><p>The Index action just shows a list of all the movies, so no argument is needed to distinguish which movie to operate on.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="3" title="previous page"><span class="section-number">4.3. </span>CHIPS: ActiveRecord Basics</a>
    <a class='right-next' id="next-link" href="5" title="next page"><span class="section-number">4.5. </span>CHIPS: Rails Routes</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>