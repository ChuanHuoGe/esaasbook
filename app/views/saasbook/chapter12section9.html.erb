
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>12.9. Security: Defending Customer Data in Your App &#8212; saasbook  documentation</title>
    
  <link href="../../_static/css/theme.css" rel="stylesheet" />
  <link href="../../_static/css/index.c5995385ac14fb8791e8eb36b4908be2.css" rel="stylesheet" />

    
  <link rel="stylesheet"
    href="../../_static/vendor/fontawesome/5.13.0/css/all.min.css">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../../_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../../_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    <link rel="stylesheet" type="text/css" href="../../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/sphinx-book-theme.acff12b8f9c144ce68a297486a2fa670.css" />
    
  <link rel="preload" as="script" href="../../_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="../../_static/documentation_options.js"></script>
    <script src="../../_static/jquery.js"></script>
    <script src="../../_static/underscore.js"></script>
    <script src="../../_static/doctools.js"></script>
    <script src="../../_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="12.10. The Plan-And-Document Perspective on Operations" href="10" />
    <link rel="prev" title="12.8. CHIPS: Exploiting Caching and Indices" href="8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          
<div class="col-12 col-md-3 bd-sidebar site-navigation show" id="site-navigation">
    
        <div class="navbar-brand-box">
    <a class="navbar-brand text-wrap" href="../..">
      
      
      <h1 class="site-logo" id="site-title">saasbook  documentation</h1>
      
    </a>
</div><form class="bd-search d-flex align-items-center" action="../../search" method="get">
  <i class="icon fas fa-search"></i>
  <input type="search" class="form-control" name="q" id="search-input" placeholder="Search the docs ..." aria-label="Search the docs ..." autocomplete="off" >
</form><nav class="bd-links" id="bd-docs-nav" aria-label="Main navigation">
    <div class="bd-toc-item active">
        <ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../../../preface">
   Preface
  </a>
 </li>
</ul>
<ul class="current nav bd-sidenav">
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/1">
   1. Introduction to Software as a Service, Agile Development, and Cloud Computing
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-1" name="toctree-checkbox-1" type="checkbox"/>
  <label for="toctree-checkbox-1">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/1">
     1.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/2">
     1.2. Software Development Processes: Plan and Document
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/3">
     1.3. Software Development Processes: The Agile Manifesto
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/4">
     1.4. Software Quality Assurance: Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/5">
     1.5. Productivity: Conciseness, Synthesis, Reuse, and Tools
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/6">
     1.6. SaaS and Service Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/7">
     1.7. Deploying SaaS: Cloud Computing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/8">
     1.8. Deploying SaaS: Browsers and Mobile
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/9">
     1.9. Beautiful vs. Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/10">
     1.10. Guided Tour and How To Use This Book
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/11">
     1.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/12">
     1.12. Concluding Remarks: Software Engineering Is More Than Programming
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/2">
   2. How to Learn a New Language
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-2" name="toctree-checkbox-2" type="checkbox"/>
  <label for="toctree-checkbox-2">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/1">
     2.1. Prelude: Learning to Learn Languages and Frameworks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/2">
     2.2. Pair Programming
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/3">
     2.3. Introducing Ruby,an Object-Oriented Language
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/4">
     2.4. Ruby Idioms: Poetry Mode, Blocks, Duck Typing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/5">
     2.5. CHIPS: Ruby Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/6">
     2.6. Gems and Bundler: Library Management in Ruby
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/7">
     2.7. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/8">
     2.8. Concluding Remarks: How (Not) To Learn a Language By Googling
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/3">
   3. SaaS Application Architecture: Microservices, APIs, and REST
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-3" name="toctree-checkbox-3" type="checkbox"/>
  <label for="toctree-checkbox-3">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/1">
     3.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/2">
     3.2. SaaS Communication Uses HTTP Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/3">
     3.3. CHIPS: HTTP and URIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/4">
     3.4. From Web Sites to Microservices: Service-Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/5">
     3.5. RESTful APIs: Everything is a Resource
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/6">
     3.6. RESTful URIs, API Calls, and JSON
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/7">
     3.7. CHIPS: Create and Deploy a Simple SaaS App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/8">
     3.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/9">
     3.9. Concluding Remarks: Continuity From CGI to SOA
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/4">
   4. SaaS Framework: Rails as a Model–View–Controller Framework
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-4" name="toctree-checkbox-4" type="checkbox"/>
  <label for="toctree-checkbox-4">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/1">
     4.1. The Model–View–Controller (MVC) Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/2">
     4.2. Rails Models: Databases and Active Record
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/3">
     4.3. CHIPS: ActiveRecord Basics
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/4">
     4.4. Routes, Controllers, and Views
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/5">
     4.5. CHIPS: Rails Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/6">
     4.6. Forms
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/7">
     4.7. CHIPS: Hangperson on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/8">
     4.8. Debugging: When Things Go Wrong
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/9">
     4.9. CHIPS: Hello Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/10">
     4.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/11">
     4.11. Concluding Remarks: Rails as a Service Framework
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/5">
   5. SaaS Framework: Advanced Programming Abstractions for SaaS
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-5" name="toctree-checkbox-5" type="checkbox"/>
  <label for="toctree-checkbox-5">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/1">
     5.1. DRYing Out MVC: Partials, Validations and Filters
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/2">
     5.2. Single Sign-On and Third-Party Authentication
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/3">
     5.3. CHIPS: Rails Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/4">
     5.4. Associations and Foreign Keys
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/5">
     5.5. Through-Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/6">
     5.6. RESTful Routes for Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/7">
     5.7. CHIPS: Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/8">
     5.8. Other Types of Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/9">
     5.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/10">
     5.10. Concluding Remarks: Languages, Productivity, and Beauty
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/6">
   6. Mobile and Desktop SaaS Clients: JavaScript Introduction
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-6" name="toctree-checkbox-6" type="checkbox"/>
  <label for="toctree-checkbox-6">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/1">
     6.1. JavaScript: The Big Picture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/2">
     6.2. Introducing ECMAScript
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/3">
     6.3. Classes, Functions and Constructors
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/4">
     6.4. The Document Object Model (DOM) and jQuery
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/5">
     6.5. The DOM and Accessibility
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/6">
     6.6. Events and Callbacks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/7">
     6.7. AJAX: Asynchronous JavaScript And XML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/8">
     6.8. Testing Java Script and AJAX
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/9">
     6.9. CHIPS: AJAX Enhancements to RottenPotatoes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/10">
     6.10. Single-Page Apps and JSON APIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/11">
     6.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/12">
     6.12. Concluding Remarks: JavaScript Past, Present and Future
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/7">
   7. Requirements: BDD and User Stories
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-7" name="toctree-checkbox-7" type="checkbox"/>
  <label for="toctree-checkbox-7">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/1">
     7.1. Behavior-Driven Design and User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/2">
     7.2. SMART User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/3">
     7.3. Lo-Fi User Interface Sketches and Storyboards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/4">
     7.4. Points and Velocity
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/5">
     7.5. Agile Cost Estimation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/6">
     7.6. Cucumber: From User Stories to Acceptance Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/7">
     7.7. CHIPS: Intro to BDD and Cucumber
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/8">
     7.8. Explicit vs. Implicit and Imperative vs. Declarative Scenarios
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/9">
     7.9. The Plan-And-Document Perspective on Documentation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/10">
     7.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/11">
     7.11. Concluding Remarks: Pros and Cons of BDD
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/8">
   8. Testing: Test-Driven Development
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-8" name="toctree-checkbox-8" type="checkbox"/>
  <label for="toctree-checkbox-8">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/1">
     8.1. FIRST, TDD, and Red–Green–Refactor
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/2">
     8.2. Anatomy of a Test Case: Arrange, Act, Assert
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/3">
     8.3. Isolating Code: Doubles and Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/4">
     8.4. Stubbing the Internet
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/5">
     8.5. CHIPS: Intro to RSpec on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/6">
     8.6. Fixtures and Factories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/7">
     8.7. Coverage Concepts and Types of Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/8">
     8.8. Other Testing Approaches and Terminology
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/9">
     8.9. CHIPS:The Acceptance Test/Unit Test Cycle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/10">
     8.10. The Plan-And-Document Perspective on Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/11">
     8.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/12">
     8.12. Concluding Remarks: TDD vs. Conventional Debugging
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/9">
   9. Software Maintenance: Enhancing Legacy Software Using Refactoring and Agile Methods
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-9" name="toctree-checkbox-9" type="checkbox"/>
  <label for="toctree-checkbox-9">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/1">
     9.1. What Makes Code “Legacy” and How Can Agile Help?
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/2">
     9.2. Exploring a Legacy Codebase
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/3">
     9.3. Establishing Ground Truth With Characterization Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/4">
     9.4. Comments and Commits: Documenting Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/5">
     9.5. Metrics, CodeSmells, and SOFA
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/6">
     9.6. Method-Level Refactoring: Replacing Dependencies With Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/7">
     9.7. The Plan-And-Document Perspective on Working With Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/8">
     9.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/9">
     9.9. Concluding Remarks: Continuous Refactoring
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/10">
   10. Agile Teams
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-10" name="toctree-checkbox-10" type="checkbox"/>
  <label for="toctree-checkbox-10">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/1">
     10.1. It Takes a Team: Two-Pizza and Scrum
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/2">
     10.2. Using Branches Effectively
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/3">
     10.3. Pull Requests and Code Reviews
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/4">
     10.4. Delivering the Backlog Using Continuous Integration
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/5">
     10.5. CHIPS: Agile Iterations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/6">
     10.6. Reporting and Fixing Bugs: The Five R’s
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/7">
     10.7. The Plan-And-Document Perspective on Managing Teams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/8">
     10.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/9">
     10.9. Concluding Remarks: From Solo Developer to Teams of Teams
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/11">
   11. Design Patterns for SaaS Apps
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-11" name="toctree-checkbox-11" type="checkbox"/>
  <label for="toctree-checkbox-11">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/1">
     11.1. Patterns, Antipatterns, and SOLID Class Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/2">
     11.2. Just Enough UML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/3">
     11.3. Single Responsibility Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/4">
     11.4. Open/Closed Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/5">
     11.5. Liskov Substitution Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/6">
     11.6. Dependency Injection Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/7">
     11.7. Demeter Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/8">
     11.8. The Plan-And-Document Perspective on Design Patterns
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/9">
     11.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/10">
     11.10. Concluding Remarks: Frameworks Capture Design Patterns
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 current active has-children">
  <a class="reference internal" href="..">
   12. Dev/Ops
  </a>
  <input checked="" class="toctree-checkbox" id="toctree-checkbox-12" name="toctree-checkbox-12" type="checkbox"/>
  <label for="toctree-checkbox-12">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul class="current">
   <li class="toctree-l2">
    <a class="reference internal" href="1">
     12.1. From Development to Deployment
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="2">
     12.2. Three-Tier Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="3">
     12.3. Responsiveness, Service Level Objectives, and Apdex
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="4">
     12.4. Releases and Feature Flags
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="5">
     12.5. Monitoring and Finding Bottlenecks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="6">
     12.6. Improving Rendering and Database Performance With Caching
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="7">
     12.7. Avoiding Abusive Database Queries
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="8">
     12.8. CHIPS: Exploiting Caching and Indices
    </a>
   </li>
   <li class="toctree-l2 current active">
    <a class="current reference internal" href="#">
     12.9. Security: Defending Customer Data in Your App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="10">
     12.10. The Plan-And-Document Perspective on Operations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="11">
     12.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="12">
     12.12. Concluding Remarks: Beyond PaaS Basics
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/13">
   13. Afterword
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-13" name="toctree-checkbox-13" type="checkbox"/>
  <label for="toctree-checkbox-13">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/1">
     13.1. Looking Backwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/2">
     13.2. Looking Forwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/3">
     13.3. Essential Readings
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/4">
     13.4. Last Words
    </a>
   </li>
  </ul>
 </li>
</ul>

    </div>
</nav> <!-- To handle the deprecated key -->

<div class="navbar_extra_footer">
  Theme by the <a href="https://ebp.jupyterbook.org">Executable Book Project</a>
</div>

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter12/sub-chapter9.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="security-defending-customer-data-in-your-app">
<h1><span class="section-number">12.9. </span>Security: Defending Customer Data in Your App<a class="headerlink" href="#security-defending-customer-data-in-your-app" title="Permalink to this headline">¶</a></h1>
<p>As security is its own field in computing, there is no shortage of material to
review or topics to study. Perhaps as a result, security experts have boiled down
their advice into principles that developers can follow. Here are three:</p>
<ul class="simple">
<li><p>The <strong>principle of least privilege</strong> states that a user or software component should be given no more privilege—that is, no further access information and resources—than what is necessary to perform its assigned task. This is analogous to the “need-to-know” principle for classified information. One example of this principle in the Rails world is that the Unix processes corresponding to your Rails app, your database, and the Web server (presentation tier) should run with low privilege and in an environment where they cannot even create new files in the file system. Good PaaS providers, including Heroku, offer a deployment environment configured in just this way.</p></li>
<li><p>The <em>principle of fail-safe defaults</em> states that unless a user or software component is given explicit access to an object, it should be denied access to the object. That is, the default should be denial of access. Proper use of strong parameters as described in Section 5.2 follows this principle.</p></li>
<li><p>The <em>principle of psychological acceptability</em> states that the protection mechanism should not make the app harder to use than if there were no protection. That is, the user interface needs to be easy to use so that the security mechanisms are routinely followed.</p></li>
</ul>
<p>The rest of this section covers six specific security vulnerabilities that are particularly
relevant for SaaS applications: protecting data using encryption, cross-site request forgery,
SQL injection and cross-site scripting, clickjacking, prohibiting calls to private controller
methods, and self-denial-of-service.</p>
<p><strong>Protecting Data Using Encryption.</strong> Since competent PaaS providers make it their business to stay
abreast of security-related issues in the infrastructure itself, developers who use PaaS can
focus primarily on attacks that can be thwarted by good coding practices. Data-related attacks
on SaaS attempt to compromise one or more of the three basic elements of security: privacy,
authenticity, and data integrity. The goal of <strong>Transport Layer Security</strong> (TLS) and its
predecessor Secure Sockets Layer (SSL) is to <strong>encrypt</strong> all HTTP traffic by transforming it using
cryptographic techniques driven by a secret (such as a password) known only to the two
communicating parties. Running HTTP over such a secure connection is called HTTPS.</p>
<p>Establishing a shared secret with a site you’ve never visited before is a challenging
problem whose practical solution, <strong>public key cryptography</strong>, is credited to Ron Rivest, Adi
Shamir and Len Adleman (hence <strong>RSA</strong>). A <strong>principal</strong> or communicating entity generates a keypair
consisting of two matched parts, one of which is made public (accessible to everyone in the
world) and the other of which is kept secret.</p>
<p>A keypair has two important properties:</p>
<ol class="arabic simple">
<li><p>A message encrypted using the private key can only be decrypted using the public key, and vice-versa.</p></li>
<li><p>The private key cannot be deduced from the public key, and vice-versa.</p></li>
</ol>
<p>Property 1 provides the foundation of public-key encryption: if you receive a message that is
decryptable with Bob’s public key, only someone possessing Bob’s private key could have created
it. A variation is the digital signature: to attest to a message, Bob generates a one-way digest
of the message (a short “fingerprint” that would change if the message were altered) and encrypts
the digest using his private key as a way of attesting “I, Bob, vouch for the information in
the message represented by this digest.”</p>
<p>To offer secure access to his site <code class="code docutils literal notranslate"><span class="pre">rottenpotatoes.com</span></code>, Bob generates a keypair consisting of a
public part KU and a private part KP. He proves his identity using conventional means such as
government-issued IDs to a <strong>certificate authority</strong> (CA) such as VeriSign. The CA then uses its
own private key CP to sign an <strong>public key certificate</strong> that states, in effect,
“<code class="code docutils literal notranslate"><span class="pre">rottenpotatoes.com</span></code> has public key <em>KU</em>.” Bob installs the certificate on his server and
enables his SaaS stack to accept secure connections—usually trivial in a PaaS environment.
Finally, he enables secure connections in his Rails app by adding <code class="code docutils literal notranslate"><span class="pre">config.force_ssl=true</span></code> to his
<code class="code docutils literal notranslate"><span class="pre">config/environments/production.rb</span></code>, which turns on secure connections in production but not
for development or testing.</p>
<p>The CA’s public key CU is built into most Web browsers, so when Alice’s browser first connects
to <code class="code docutils literal notranslate"><span class="pre">https://rottenpotatoes.com</span></code> and requests the certificate, it can verify the CA’s signature
and obtain Bob’s public key <em>KU</em> from the certificate. Alice’s browser then chooses a random
string as the secret, encrypts it using <em>KU</em>, and sends it to rottenpotatoes.com, which alone
can decrypt it using <em>KP</em>. This shared secret is then used to encrypt HTTP traffic using much
faster <strong>symmetric-key cryptography</strong> for the duration of the session. At this point, any content
sent via HTTPS is reasonably secure from eaves- droppers, and Alice’s browser believes the
server it’s talking to is the genuine RottenPotatoes server, since only a server possessing
<em>KP</em> could have completed the key exchange step.</p>
<p>It’s important to recognize that this is the limit of what a secure HTTP connection can do.
In particular, the server knows nothing about Alice’s identity, and no guarantees can be made
about Alice’s data other than its privacy during transmission to RottenPotatoes.</p>
<p><strong>Cross-site request forgery.</strong> A CSRF attack (sometimes pronounced “sea-surf”) involves
tricking the user’s browser into visiting a different web site for which the user has a valid
cookie, and performing an illicit action on that site as the user. For example, suppose Alice
has recently logged into her MyBank.com account, so her browser now has a valid cookie for
MyBank.com showing that she is logged in. Now Alice visits a chat forum where malicious
Mallory has posted a message with the following embedded “image”:</p>
<div class="highlight-html notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Here&#39;s a risque picture of me:
<span class="linenos">2</span>    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;http://mybank.com/transfer/mallory/5000&quot;</span><span class="p">&gt;</span>
<span class="linenos">3</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</pre></div>
</div>
<p>When Alice views the blog post, or if she receives an email with this link embedded in it,
her browser will try to “fetch” the image from this RESTful URI, which happens to transfer
$5000 into Mallory’s account. Alice will see a “broken image” icon without realizing the
damage. CSRF is often combined with Cross-site Scripting (see below) to perform more
sophisticated attacks.</p>
<p>There are two steps to thwarting such attacks. The first is to ensure that RESTful actions
performed using the <code class="code docutils literal notranslate"><span class="pre">GET</span></code> HTTP method have no side effects. An action such as bank withdrawal
or completing a purchase should be handled by a POST. This makes it harder for the attacker
to deliver the “payload” using embedded asset tags like <code class="code docutils literal notranslate"><span class="pre">IMG</span></code>, which browsers <em>always</em> handle
using <code class="code docutils literal notranslate"><span class="pre">GET</span></code>. The second step is to insert a randomly-generated string based on the current
session into every page view and arrange to include its value as a hidden form field on every
form. This string will look different for Alice than it will for Bob, since their sessions
are distinct. When a form is submitted without the correct random string, the submission is
rejected. Rails automates this defense: all you need to do is render <code class="code docutils literal notranslate"><span class="pre">csrf_meta_tags</span></code> in every
such view and add <code class="code docutils literal notranslate"><span class="pre">protect_from_forgery</span></code> to any controller that might handle a form submission.
Indeed, when you use <code class="code docutils literal notranslate"><span class="pre">rails</span> <span class="pre">new</span></code> to generate a new app, these defenses are included in
<code class="code docutils literal notranslate"><span class="pre">app/views/layouts/application.html.erb</span></code> and <code class="code docutils literal notranslate"><span class="pre">app/controllers/</span> <span class="pre">application_controller.rb</span></code> respectively.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="k">class</span> <span class="nc">MoviesController</span>
<span class="linenos">2</span>    <span class="k">def</span> <span class="nf">search</span>
<span class="linenos">3</span>        <span class="n">movies</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;name = &#39;</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:title</span><span class="o">]</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span> <span class="c1"># UNSAFE!</span>
<span class="linenos">4</span>        <span class="c1"># movies = Movie.where(&quot;name = ?&quot;, params[:title]) # safe</span>
<span class="linenos">5</span>    <span class="k">end</span>
<span class="linenos">6</span><span class="k">end</span>
</pre></div>
</div>
<p><strong>SQL injection and cross-site scripting.</strong> Both of these attacks exploit SaaS apps that handle
attacker-provided content unsafely. Defending against both can be summarized by the same
advice: <em>sanitize any content coming from the user.</em> In <strong>SQL injection</strong>, Mallory enters form
data that she hopes will be interpolated directly into a SQL query statement executed
by the app. Figure 12.12 shows an example and its defense: using prepared statements, in which
“dangerous” characters in parts of the SQL statement are properly escaped. In <strong>cross-site
scripting</strong> (XSS), Mallory prepares a fragment of JavaScript code that performs a harmful
action. Her goal is to get RottenPotatoes to render that fragment as part of a displayed HTML
page, triggering execution of the script. Figure 12.13 shows how Mallory might try to do this,
by creating a movie whose <code class="code docutils literal notranslate"><span class="pre">title</span></code> attribute is a simple piece of JavaScript that will display an
alert; real examples often include JavaScript code that steals Alice’s valid cookie and transmits
it to Mallory, who can now “hijack” Alice’s session by passing Alice’s cookie as her own. Worse,
even if the XSS attack only succeeds in reading the page content from another site and not the
cookie, the page content might contain the CSRF-prevention token generated by <code class="code docutils literal notranslate"><span class="pre">csrf_meta_tags</span></code>
corresponding to Alice’s session, so XSS is often used to enable CSRF. Fortunately, the Rails
Erb renderer always escapes “dangerous” HTML characters by default, as the figure shows; to
prevent Erb from escaping a string <code class="code docutils literal notranslate"><span class="pre">s</span></code>, you must render <code class="code docutils literal notranslate"><span class="pre">raw(s)</span></code>, and if you do so, you’d better
have a good reason for believing it is safe, such as having separately sanitized <code class="code docutils literal notranslate"><span class="pre">s</span></code> when it was
first received from Mallory.</p>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="x">&lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x">&lt;/h2&gt;</span>
<span class="linenos">2</span><span class="x">&lt;p&gt;Released on </span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">release_date</span> <span class="cp">%&gt;</span><span class="x">. Rated </span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">rating</span> <span class="cp">%&gt;</span><span class="x">.&lt;/p&gt;</span>
</pre></div>
</div>
<div class="highlight-html notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;&lt;</span><span class="nt">script</span><span class="p">&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Danger!&quot;</span><span class="p">);&lt;/</span><span class="nt">script</span><span class="p">&gt;&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="linenos">2</span><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Released on 1992-11-25 00:00:00 UTC. Rated G.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</pre></div>
</div>
<div class="highlight-html notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="ni">&amp;lt;</span>script<span class="ni">&amp;gt;</span>alert(&quot;Danger!&quot;);<span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="linenos">2</span><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span> Released on 1992-11-25 00:00:00 UTC. Rated G.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</pre></div>
</div>
<p><strong>Clickjacking</strong> or <em>UI redress attacks</em> are aimed at getting the user to take a UI action they
normally wouldn’t take, by obfuscating that action in the UI. Like XSS, they rely on
deceiving the user regarding which site is actually displaying what they’re seeing. For
example, suppose you want to get many people to buy your widget on Amazon. First, create an
unrelated page that has a “bait button” on it, such as “Click here for a free gift card.”
Craft that page so that it loads the Amazon product page for your widget into an HTTP <code class="code docutils literal notranslate"><span class="pre">iframe</span></code>,
and uses CSS to make the framed Amazon page transparent (invisible) but layered logically on
top of the bait page, so that the “invisible” page is actually the one whose UI elements
receive click events. Then position the framed page (more CSS) such that the Amazon “Buy Now
With 1-Click” button is positioned directly over the bait button. The user thinks they’re
clicking the bait button, but in fact it’s the Amazon button that receives the event and is
activated. Of course, the user must be signed into Amazon for this to work, but there are many
sites on which users have selected “remember me” so they don’t have to login every time.
Clickjacking was famously used in 2010 to garner many illegitimate Likes for a particular
Facebook page.</p>
<p>The most effective defense against clickjacking is to ensure your site’s pages cannot be
framed on another site. All modern browsers observe the <code class="code docutils literal notranslate"><span class="pre">X-Frame-Options</span></code> HTTP header; if
the value is <code class="code docutils literal notranslate"><span class="pre">SAMEORIGIN</span></code>, framing of a page is only allowed by other pages from the same site.
Rails 4 and later set this header by default, but in earlier versions, the <code class="code docutils literal notranslate"><span class="pre">secure_headers</span></code> gem
was necessary to set it explicitly.</p>
<p><strong>Prohibiting calls to private controller methods.</strong> It’s not unusual for controllers to include
“sensitive” helper methods that aren’t intended to be called by end-user actions, but only
from inside an action. Use <code class="code docutils literal notranslate"><span class="pre">protected</span></code> for any controller method that isn’t the target of a
user-initiated action and check <code class="code docutils literal notranslate"><span class="pre">rake</span> <span class="pre">routes</span></code> to make sure no routes include wildcards that
could match a nonpublic controller action.</p>
<p><strong>Self-denial-of-service.</strong> A malicious denial-of-service attack seeks to keep a server busy doing
useless work, preventing access by legitimate users. You can inadvertently leave yourself open
to these attacks if you allow arbitrary users to perform actions that result in a lot of work
for the server, such as allowing the upload of a large file or generating an expensive report.
For this reason, “expensive” actions are usually handled by a separate background process. For
example, with Heroku, your app can queue the action using a simple queue system such as Redis,
and a Heroku background worker can be triggered to pull jobs off the queue and run them while
the main app server remains available to respond to interactive requests. Uploading files also
carries other risks, so you should “outsource” that responsibility to other services; for
example, many PaaS providers provide plugins for SaaS apps in popular languages the facilitate
the safe upload of files to external cloud-based storage such as Amazon Simple Storage Service
(S3).</p>
<p>A final warning about security is in order. The “arms race” between SaaS developers and
evildoers is ongoing, so even a carefully maintained site isn’t 100% safe. In addition to
defending against attacks on customer data, you should <em>also</em> be careful about handling sensitive
data. Don’t store passwords in cleartext; store them encrypted, or better yet, rely on
third-party authentication as described in Section 5.2, to avoid embarrassing incidents of
password theft. Don’t even <em>think</em> of storing credit card numbers, even encrypted. The Payment
Card Industry association imposes an audit burden costing tens of thousands of dollars per
year to any site that does this (to prevent credit card fraud), and the burden is only
slightly less severe if your code ever manipulates a credit card number even if you don’t
store it. Instead, offload this responsibility to sites like PayPal or Stripe that specialize
in meeting these heavy burdens.</p>
<p><strong>Self-Check 12.9.1.</strong> <em>True or false: If a site has a valid public key certificate, Cross-Site
Request Forgery (CSRF) and SQL Injection attacks are harder to mount against it.</em></p>
<blockquote>
<div><p>False. The security of the HTTP channel is irrelevant to both attacks. CSRF relies only on a
site erroneously accepting a request that has a valid cookie but originated elsewhere. SQL
injection relies only on the SaaS server code unsafely interpolating user-entered strings
into a SQL query.</p>
</div></blockquote>
<p><strong>Self-Check 12.9.2.</strong> <em>Why can’t CSRF attacks be thwarted by checking the Referer: header of an
HTTP request?</em></p>
<blockquote>
<div><p>The header can be trivially forged.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="8" title="previous page"><span class="section-number">12.8. </span>CHIPS: Exploiting Caching and Indices</a>
    <a class='right-next' id="next-link" href="10" title="next page"><span class="section-number">12.10. </span>The Plan-And-Document Perspective on Operations</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="../../_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>