
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>10.6. Reporting and Fixing Bugs: The Five R’s &#8212; saasbook  documentation</title>
    

    
  
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="10.7. The Plan-And-Document Perspective on Managing Teams" href="7" />
    <link rel="prev" title="10.5. CHIPS: Agile Iterations" href="5" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter10/sub-chapter6.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="reporting-and-fixing-bugs-the-five-rs">
<h1><span class="section-number">10.6. </span>Reporting and Fixing Bugs: The Five R’s<a class="headerlink" href="#reporting-and-fixing-bugs-the-five-rs" title="Permalink to this headline">¶</a></h1>
<p>Inevitably, bugs happen. If you’re lucky, they are found before the software is in
production, but production bugs happen too. Everyone on the team must agree on processes
for managing the phases of the bug’s lifecycle:</p>
<ol class="arabic simple">
<li><p><strong>R</strong>eporting a bug</p></li>
<li><p><strong>R</strong>eproducing the problem, or else <strong>R</strong>eclassifying it as “not a bug” or “won’t be fixed”</p></li>
<li><p>Creating a <strong>R</strong>egression test that demonstrates the bug</p></li>
<li><p><strong>R</strong>epairing the bug</p></li>
<li><p><strong>R</strong>eleasing the repaired code</p></li>
</ol>
<p>Any stakeholder may find and report a bug in server-side or client-side SaaS code. A member
of the development or QA team must then reproduce the bug, documenting the environment and
steps necessary to trigger it. This process may result in reclassifying the bug as “not a bug”
for various reasons:</p>
<ul class="simple">
<li><p>This is not a bug but a request to make an enhancement or change a behavior that is working as designed</p></li>
<li><p>This bug is in a part of the code that is being undeployed or is otherwise no longer supported</p></li>
<li><p>This bug occurs only with an unsupported user environment, such as a very old browser lacking necessary features for this SaaS app</p></li>
<li><p>This bug is already fixed in the latest version (uncommon in SaaS, whose users are always using the latest version)</p></li>
</ul>
<p>Once the bug is confirmed as genuine and reproducible, it’s entered into a bug management system.
A plethora of such systems exists, but the needs of many small to medium teams can be met by a
tool you’re already using: Pivotal Tracker allows marking a story as a Bug rather than a Feature,
which assigns the story zero points but otherwise allows it to be tracked to completion just like
a regular user story. An advantage of this tool is that Tracker manages the bug’s lifecycle for
you, so existing processes for delivering user stories can be readily adapted to fixing bugs. For
example, fixing the bug must be prioritized relative to other work; in a waterfall process, this
may mean prioritization relative to other outstanding bugs while in the maintenance phase, but
in an Agile process it usually means prioritization relative to developing new features from
user stories. Using Tracker, the Product Manager can move the bug story above or below other
stories based on the bug’s severity and impact on the customer. For example, bugs that may
cause data loss in production will get prioritized very high.</p>
<p>The next step is repair, which always begins with <em>first</em> creating the <em>simplest possible</em> automated
test that fails in the presence of the bug, and <em>then</em> changing the code to make the test(s) pass
green. This should sound familiar to you by now as a TDD practitioner, but this practice is true
even in non-TDD environments: <em>no bug can be closed out without a test</em>. Depending on the bug,
unit tests, functional tests, integration tests, or a combination of these may be required.
<em>Simplest</em> means that the tests depend on as few preconditions as possible, tightly circumscribing
the bug. For example, simplifying an RSpec unit test would mean minimizing the setup preceding
the test action or in the before block, and simplifying a Cucumber scenario would mean minimizing
the number of <code class="code docutils literal notranslate"><span class="pre">Given</span></code> or <code class="code docutils literal notranslate"><span class="pre">Background</span></code> steps. These tests usually get added to the regular regression
suite to ensure the bug doesn’t recur undetected. A complex bug may require multiple commits to
fix; a common policy in BDD+TDD projects is that commits with failing or missing tests shouldn’t
be merged to the main development branch until the tests pass green.</p>
<p>Many bug tracking systems can automatically cross-reference bug reports with the commit-IDs that
contain the associated fixes and regression tests. For example, using GitHub’s service hooks, a
commit can be annotated with the story ID of the corresponding bug or feature in Tracker, and
when that commit is pushed to GitHub, the story is automati- cally marked as Delivered. Depending
on team protocol and the bug management system in use, the bug may be “closed out” either
immediately by noting which release will contain the fix or after the release actually occurs.</p>
<p>As we will see in Chapter 12, in most Agile teams releases are very frequent, shortening
the bug lifecycle.</p>
<p><strong>Self-Check 10.6.1.</strong> <em>Why do you think “bug fix” stories are worth zero points in Tracker even
though they follow the same lifecycle as regular user stories?</em></p>
<blockquote>
<div><p>A team’s velocity would be artificially inflated by fixing bugs, since they’d get
points for implementing the feature in the first place and then more points for actually
getting the implementation right.</p>
</div></blockquote>
<p><strong>Self-Check 10.6.2.</strong> <em>True or false: a bug that is triggered by interacting with another
service (for example, authentication via Twitter) cannot be captured in a regression
test because the necessary conditions would require us to control Twitter’s behavior.</em></p>
<blockquote>
<div><p>False: integration-level mocking and stubbing, for example using the FakeWeb gem or the
techniques described in Section 8.4, can almost always be used to mimic the external
conditions necessary to reproduce the bug in an automated test.</p>
</div></blockquote>
<p><strong>Self-Check 10.6.3.</strong> <em>True or false: a bug in which the browser renders the wrong content or
layout due to JavaScript problems might be reproducible manually by a human being, but it
cannot be captured in an automated regression test.</em></p>
<blockquote>
<div><p>False: tools such as Jasmine and Webdriver (Section 6.8) can be used to develop such tests.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="/chapter/10/section/5" title="previous page"><span class="section-number">10.5. </span>CHIPS: Agile Iterations</a>
    <a class='right-next' id="next-link" href="/chapter/10/section/7" title="next page"><span class="section-number">10.7. </span>The Plan-And-Document Perspective on Managing Teams</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>