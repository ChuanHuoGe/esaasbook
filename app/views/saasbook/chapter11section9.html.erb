
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>11.9. Fallacies and Pitfalls &#8212; saasbook  documentation</title>
    

    
  
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="11.10. Concluding Remarks: Frameworks Capture Design Patterns" href="10" />
    <link rel="prev" title="11.8. The Plan-And-Document Perspective on Design Patterns" href="8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter11/sub-chapter9.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="fallacies-and-pitfalls">
<h1><span class="section-number">11.9. </span>Fallacies and Pitfalls<a class="headerlink" href="#fallacies-and-pitfalls" title="Permalink to this headline">¶</a></h1>
<p><strong>Pitfall: Over-reliance or under-reliance on patterns.</strong></p>
<p>As with every tool and methodology we’ve seen, slavishly following design patterns is a
pitfall: they can help point the way when your problem could take advantage of a proven
solution, but they cannot by themselves ensure beautiful code. In fact, the GoF authors
specifically warn <em>against</em> trying to evaluate the soundness of a design based on the number
of patterns it uses. In addition, if you apply design patterns too early in your design
cycle, you may try to implement a pattern in its full generality even though you may not
need that generality for solving the current problem. That will complicate your design
because most design patterns call for <em>more</em> classes, methods, and levels of indirection than
the same code would require without this level of generality. In contrast, if you apply
design patterns too late, you risk falling into antipatterns and extensive refactoring.</p>
<p>What to do? Develop taste and judgment through learning by doing. You will make some mistakes
as you go, but your judgment on how to deliver working and maintainable code will quickly
improve.</p>
<p><strong>Pitfall: Over-reliance on UML or other diagrams.</strong></p>
<p>A diagram’s purpose is communication of intent. Reading UML diagrams is not necessarily easier
than reading user stories or well-factored TDD tests. Create a diagram when it
helps to clarify a class architecture; don’t rely on them as a crutch.</p>
<p><strong>Fallacy: SOLID principles aren’t needed in dynamic languages.</strong></p>
<p>As we saw in this chapter, some of the problems addressed by SOLID don’t really arise in
dynamically-typed languages like Ruby. Nonetheless, the SOLID guidelines still represent
good design; in static languages, there is simply a much more tangible up-front cost to
ignoring them. In dynamic languages, while the opportunity exists to use dynamic features
to make your code more elegant and DRY without the extra machinery required by some of the
SOLID guidelines, the corresponding risk is that it’s easier to fall into sloth and end up
with ugly antipattern code.</p>
<p><strong>Pitfall: Lots of private methods in a class.</strong></p>
<p>You may have already discovered that methods declared <code class="code docutils literal notranslate"><span class="pre">private</span></code> are hard to test, because by
definition they can only be called from within an instance method of that class—meaning they
cannot be called directly from an RSpec test. Although you can use a hack to temporarily make
the method public (<code class="code docutils literal notranslate"><span class="pre">MyClass.send(:public,:some_private_method)</span></code>), private methods complex enough
to need their own tests should be considered a smell: the methods themselves may be too long,
violating the <strong>S</strong>hort guideline of SOFA, and the class containing these methods may be violating
the <strong>Single Responsibility Principle</strong>. In this case, consider extracting a collaborator class
whose methods are public (and therefore easy to test and easy to shorten by refactoring) but
are only called from the original class, thereby improving maintainability and testability.</p>
<p><strong>Pitfall: Using</strong> <code class="code docutils literal notranslate"><span class="pre">initialize</span></code> <strong>to implement factory patterns.</strong></p>
<p>In Section 11.4, we showed an example of Abstract Factory pattern in which the correct subclass
constructor is called directly. Another common scenario is one in which you have a class A with
subclasses A1 and A2, and you want calls to A’s constructor to return a new object of the correct
subclass. You usually cannot put the factory logic into the <code class="code docutils literal notranslate"><span class="pre">initialize</span></code> method of A, because that
method must by definition return an instance of class A. Instead, give the factory method a
different name such as <code class="code docutils literal notranslate"><span class="pre">create</span></code>, make it a class method, and call it
from A’s constructor:</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="k">class</span> <span class="nc">A</span>
<span class="linenos">2</span>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="n">subclass</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="c1"># subclass must be either &#39;A1&#39; or &#39;A2&#39;</span>
<span class="linenos">3</span>        <span class="k">return</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="n">subclass</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
<span class="linenos">4</span>    <span class="k">end</span>
<span class="linenos">5</span><span class="k">end</span>
</pre></div>
</div>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="/chapter/11/section/8" title="previous page"><span class="section-number">11.8. </span>The Plan-And-Document Perspective on Design Patterns</a>
    <a class='right-next' id="next-link" href="/chapter/11/section/10" title="next page"><span class="section-number">11.10. </span>Concluding Remarks: Frameworks Capture Design Patterns</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>