
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>8.4. Stubbing the Internet &#8212; saasbook  documentation</title>
    

    
  
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="8.5. CHIPS: Intro to RSpec on Rails" href="5" />
    <link rel="prev" title="8.3. Isolating Code: Doubles and Seams" href="3" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter8/sub-chapter4.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="stubbing-the-internet">
<h1><span class="section-number">8.4. </span>Stubbing the Internet<a class="headerlink" href="#stubbing-the-internet" title="Permalink to this headline">¶</a></h1>
<p>When testing a method that makes a call to an external service via an API,
there are many reasons we almost certainly <em>don’t</em> want to make a real call
to that API. One reason is abuse of the service’s terms. Several years ago,
the CS department head at a major US university received a complaint from
a web site that hosted academic papers, because a group of students had been
working on a student project that repeatedly made “test” API calls against
the real site. The site threatened to cut off the university’s access if
the students continued this behavior. Another reason is that making real
calls might prevent the test from being <strong>R</strong>epeatable depending on how the remote
service responds, and would almost certainly prevent the test from being <strong>F</strong>ast.</p>
<p>In fact, when testing our own app, all that we really care about is whether the API
calls it <em>would</em> make are correctly formed—analogously to checking a call to a method
stub to make sure the arguments are correct. So the more general question is: Where
should we stub external methods when testing an app that makes calls to an external
service? In Figure 8.5 we chose to stub the model and mimic the results of the gem’s
calls to TMDb, but a more robust integration testing approach would instead place the
stub “closer” to the remote service. In particular, we could create fixtures—files
containing the JSON content returned by actual calls to the service—and arrange to
intercept calls to the remote service and return the contents of those fixture files
instead. The Webmock gem does exactly this: it stubs out the entire Web except for
particular URIs that return a canned response when accessed from
a Ruby program. (You can think of Webmock as <code class="code docutils literal notranslate"><span class="pre">allow(...).to</span> <span class="pre">receive(...).and_return</span></code> for the whole Web.)
There’s even a companion gem VCR that automates getting a response from the real service,
saving the response data in a fixture file, and then “replaying” the fixture when your tests
cause the remote service to be “called” by intercepting low-level calls in the Ruby HTTP library.</p>
<p>From an integration-testing standpoint, Webmock is the most realistic way to test interactions
with a remote service, because the stubbed behavior is “farthest away”—we are stubbing as late
as possible in the flow of the request. Therefore, when creating Cucumber scenarios to test
external service integration, Webmock is usually the appropriate choice. From a unit testing
point of view (as we’ve adopted in this chapter) it’s less compelling, since we are concerned
with the correct behavior of specific class methods, and we don’t mind stubbing “close by” in
order to observe those behaviors in a controlled environment.</p>
<p><strong>Self-Check 8.4.1.</strong> <em>Is “stubbing the Internet” in conflict with the advice of Chapter 7
that one should avoid mocks or stubs in full-system Cucumber scenarios?</em></p>
<blockquote>
<div><p>Full-system testing should avoid “faking” certain parts of it as we have done using
seams in most of this chapter. However, if the “full system” includes interacting with
outside services we don’t control, such as the interaction with TMDb in this example,
we do need a way to “fake” their behavior for testing.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="/chapter/8/section/3" title="previous page"><span class="section-number">8.3. </span>Isolating Code: Doubles and Seams</a>
    <a class='right-next' id="next-link" href="/chapter/8/section/5" title="next page"><span class="section-number">8.5. </span>CHIPS: Intro to RSpec on Rails</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>