
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>2.3. Introducing Ruby,an Object-Oriented Language &#8212; saasbook  documentation</title>
    
  <link href="../../_static/css/theme.css" rel="stylesheet" />
  <link href="../../_static/css/index.c5995385ac14fb8791e8eb36b4908be2.css" rel="stylesheet" />

    
  <link rel="stylesheet"
    href="../../_static/vendor/fontawesome/5.13.0/css/all.min.css">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../../_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../../_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    <link rel="stylesheet" type="text/css" href="../../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/sphinx-book-theme.acff12b8f9c144ce68a297486a2fa670.css" />
    
  <link rel="preload" as="script" href="../../_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="../../_static/documentation_options.js"></script>
    <script src="../../_static/jquery.js"></script>
    <script src="../../_static/underscore.js"></script>
    <script src="../../_static/doctools.js"></script>
    <script src="../../_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="2.4. Ruby Idioms: Poetry Mode, Blocks, Duck Typing" href="4" />
    <link rel="prev" title="2.2. Pair Programming" href="2" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          
<div class="col-12 col-md-3 bd-sidebar site-navigation show" id="site-navigation">
    
        <div class="navbar-brand-box">
    <a class="navbar-brand text-wrap" href="../..">
      
      
      <h1 class="site-logo" id="site-title">saasbook  documentation</h1>
      
    </a>
</div><form class="bd-search d-flex align-items-center" action="../../search" method="get">
  <i class="icon fas fa-search"></i>
  <input type="search" class="form-control" name="q" id="search-input" placeholder="Search the docs ..." aria-label="Search the docs ..." autocomplete="off" >
</form><nav class="bd-links" id="bd-docs-nav" aria-label="Main navigation">
    <div class="bd-toc-item active">
        <ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../../../preface">
   Preface
  </a>
 </li>
</ul>
<ul class="current nav bd-sidenav">
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/1">
   1. Introduction to Software as a Service, Agile Development, and Cloud Computing
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-1" name="toctree-checkbox-1" type="checkbox"/>
  <label for="toctree-checkbox-1">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/1">
     1.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/2">
     1.2. Software Development Processes: Plan and Document
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/3">
     1.3. Software Development Processes: The Agile Manifesto
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/4">
     1.4. Software Quality Assurance: Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/5">
     1.5. Productivity: Conciseness, Synthesis, Reuse, and Tools
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/6">
     1.6. SaaS and Service Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/7">
     1.7. Deploying SaaS: Cloud Computing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/8">
     1.8. Deploying SaaS: Browsers and Mobile
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/9">
     1.9. Beautiful vs. Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/10">
     1.10. Guided Tour and How To Use This Book
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/11">
     1.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/12">
     1.12. Concluding Remarks: Software Engineering Is More Than Programming
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 current active has-children">
  <a class="reference internal" href="..">
   2. How to Learn a New Language
  </a>
  <input checked="" class="toctree-checkbox" id="toctree-checkbox-2" name="toctree-checkbox-2" type="checkbox"/>
  <label for="toctree-checkbox-2">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul class="current">
   <li class="toctree-l2">
    <a class="reference internal" href="1">
     2.1. Prelude: Learning to Learn Languages and Frameworks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="2">
     2.2. Pair Programming
    </a>
   </li>
   <li class="toctree-l2 current active">
    <a class="current reference internal" href="#">
     2.3. Introducing Ruby,an Object-Oriented Language
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="4">
     2.4. Ruby Idioms: Poetry Mode, Blocks, Duck Typing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="5">
     2.5. CHIPS: Ruby Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="6">
     2.6. Gems and Bundler: Library Management in Ruby
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="7">
     2.7. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="8">
     2.8. Concluding Remarks: How (Not) To Learn a Language By Googling
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/3">
   3. SaaS Application Architecture: Microservices, APIs, and REST
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-3" name="toctree-checkbox-3" type="checkbox"/>
  <label for="toctree-checkbox-3">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/1">
     3.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/2">
     3.2. SaaS Communication Uses HTTP Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/3">
     3.3. CHIPS: HTTP and URIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/4">
     3.4. From Web Sites to Microservices: Service-Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/5">
     3.5. RESTful APIs: Everything is a Resource
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/6">
     3.6. RESTful URIs, API Calls, and JSON
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/7">
     3.7. CHIPS: Create and Deploy a Simple SaaS App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/8">
     3.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/9">
     3.9. Concluding Remarks: Continuity From CGI to SOA
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/4">
   4. SaaS Framework: Rails as a Model–View–Controller Framework
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-4" name="toctree-checkbox-4" type="checkbox"/>
  <label for="toctree-checkbox-4">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/1">
     4.1. The Model–View–Controller (MVC) Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/2">
     4.2. Rails Models: Databases and Active Record
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/3">
     4.3. CHIPS: ActiveRecord Basics
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/4">
     4.4. Routes, Controllers, and Views
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/5">
     4.5. CHIPS: Rails Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/6">
     4.6. Forms
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/7">
     4.7. CHIPS: Hangperson on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/8">
     4.8. Debugging: When Things Go Wrong
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/9">
     4.9. CHIPS: Hello Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/10">
     4.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/11">
     4.11. Concluding Remarks: Rails as a Service Framework
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/5">
   5. SaaS Framework: Advanced Programming Abstractions for SaaS
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-5" name="toctree-checkbox-5" type="checkbox"/>
  <label for="toctree-checkbox-5">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/1">
     5.1. DRYing Out MVC: Partials, Validations and Filters
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/2">
     5.2. Single Sign-On and Third-Party Authentication
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/3">
     5.3. CHIPS: Rails Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/4">
     5.4. Associations and Foreign Keys
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/5">
     5.5. Through-Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/6">
     5.6. RESTful Routes for Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/7">
     5.7. CHIPS: Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/8">
     5.8. Other Types of Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/9">
     5.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/10">
     5.10. Concluding Remarks: Languages, Productivity, and Beauty
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/6">
   6. Mobile and Desktop SaaS Clients: JavaScript Introduction
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-6" name="toctree-checkbox-6" type="checkbox"/>
  <label for="toctree-checkbox-6">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/1">
     6.1. JavaScript: The Big Picture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/2">
     6.2. Introducing ECMAScript
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/3">
     6.3. Classes, Functions and Constructors
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/4">
     6.4. The Document Object Model (DOM) and jQuery
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/5">
     6.5. The DOM and Accessibility
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/6">
     6.6. Events and Callbacks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/7">
     6.7. AJAX: Asynchronous JavaScript And XML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/8">
     6.8. Testing Java Script and AJAX
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/9">
     6.9. CHIPS: AJAX Enhancements to RottenPotatoes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/10">
     6.10. Single-Page Apps and JSON APIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/11">
     6.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/12">
     6.12. Concluding Remarks: JavaScript Past, Present and Future
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/7">
   7. Requirements: BDD and User Stories
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-7" name="toctree-checkbox-7" type="checkbox"/>
  <label for="toctree-checkbox-7">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/1">
     7.1. Behavior-Driven Design and User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/2">
     7.2. SMART User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/3">
     7.3. Lo-Fi User Interface Sketches and Storyboards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/4">
     7.4. Points and Velocity
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/5">
     7.5. Agile Cost Estimation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/6">
     7.6. Cucumber: From User Stories to Acceptance Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/7">
     7.7. CHIPS: Intro to BDD and Cucumber
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/8">
     7.8. Explicit vs. Implicit and Imperative vs. Declarative Scenarios
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/9">
     7.9. The Plan-And-Document Perspective on Documentation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/10">
     7.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/11">
     7.11. Concluding Remarks: Pros and Cons of BDD
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/8">
   8. Testing: Test-Driven Development
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-8" name="toctree-checkbox-8" type="checkbox"/>
  <label for="toctree-checkbox-8">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/1">
     8.1. FIRST, TDD, and Red–Green–Refactor
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/2">
     8.2. Anatomy of a Test Case: Arrange, Act, Assert
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/3">
     8.3. Isolating Code: Doubles and Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/4">
     8.4. Stubbing the Internet
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/5">
     8.5. CHIPS: Intro to RSpec on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/6">
     8.6. Fixtures and Factories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/7">
     8.7. Coverage Concepts and Types of Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/8">
     8.8. Other Testing Approaches and Terminology
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/9">
     8.9. CHIPS:The Acceptance Test/Unit Test Cycle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/10">
     8.10. The Plan-And-Document Perspective on Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/11">
     8.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/12">
     8.12. Concluding Remarks: TDD vs. Conventional Debugging
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/9">
   9. Software Maintenance: Enhancing Legacy Software Using Refactoring and Agile Methods
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-9" name="toctree-checkbox-9" type="checkbox"/>
  <label for="toctree-checkbox-9">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/1">
     9.1. What Makes Code “Legacy” and How Can Agile Help?
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/2">
     9.2. Exploring a Legacy Codebase
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/3">
     9.3. Establishing Ground Truth With Characterization Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/4">
     9.4. Comments and Commits: Documenting Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/5">
     9.5. Metrics, CodeSmells, and SOFA
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/6">
     9.6. Method-Level Refactoring: Replacing Dependencies With Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/7">
     9.7. The Plan-And-Document Perspective on Working With Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/8">
     9.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/9">
     9.9. Concluding Remarks: Continuous Refactoring
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/10">
   10. Agile Teams
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-10" name="toctree-checkbox-10" type="checkbox"/>
  <label for="toctree-checkbox-10">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/1">
     10.1. It Takes a Team: Two-Pizza and Scrum
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/2">
     10.2. Using Branches Effectively
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/3">
     10.3. Pull Requests and Code Reviews
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/4">
     10.4. Delivering the Backlog Using Continuous Integration
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/5">
     10.5. CHIPS: Agile Iterations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/6">
     10.6. Reporting and Fixing Bugs: The Five R’s
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/7">
     10.7. The Plan-And-Document Perspective on Managing Teams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/8">
     10.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/9">
     10.9. Concluding Remarks: From Solo Developer to Teams of Teams
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/11">
   11. Design Patterns for SaaS Apps
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-11" name="toctree-checkbox-11" type="checkbox"/>
  <label for="toctree-checkbox-11">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/1">
     11.1. Patterns, Antipatterns, and SOLID Class Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/2">
     11.2. Just Enough UML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/3">
     11.3. Single Responsibility Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/4">
     11.4. Open/Closed Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/5">
     11.5. Liskov Substitution Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/6">
     11.6. Dependency Injection Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/7">
     11.7. Demeter Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/8">
     11.8. The Plan-And-Document Perspective on Design Patterns
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/9">
     11.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/10">
     11.10. Concluding Remarks: Frameworks Capture Design Patterns
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/12">
   12. Dev/Ops
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-12" name="toctree-checkbox-12" type="checkbox"/>
  <label for="toctree-checkbox-12">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/1">
     12.1. From Development to Deployment
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/2">
     12.2. Three-Tier Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/3">
     12.3. Responsiveness, Service Level Objectives, and Apdex
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/4">
     12.4. Releases and Feature Flags
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/5">
     12.5. Monitoring and Finding Bottlenecks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/6">
     12.6. Improving Rendering and Database Performance With Caching
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/7">
     12.7. Avoiding Abusive Database Queries
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/8">
     12.8. CHIPS: Exploiting Caching and Indices
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/9">
     12.9. Security: Defending Customer Data in Your App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/10">
     12.10. The Plan-And-Document Perspective on Operations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/11">
     12.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/12">
     12.12. Concluding Remarks: Beyond PaaS Basics
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/13">
   13. Afterword
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-13" name="toctree-checkbox-13" type="checkbox"/>
  <label for="toctree-checkbox-13">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/1">
     13.1. Looking Backwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/2">
     13.2. Looking Forwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/3">
     13.3. Essential Readings
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/4">
     13.4. Last Words
    </a>
   </li>
  </ul>
 </li>
</ul>

    </div>
</nav> <!-- To handle the deprecated key -->

<div class="navbar_extra_footer">
  Theme by the <a href="https://ebp.jupyterbook.org">Executable Book Project</a>
</div>

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part1/chapter2/sub-chapter3.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="introducing-ruby-an-object-oriented-language">
<h1><span class="section-number">2.3. </span>Introducing Ruby,an Object-Oriented Language<a class="headerlink" href="#introducing-ruby-an-object-oriented-language" title="Permalink to this headline">¶</a></h1>
<p>Ruby is a minimalist language: while its libraries are rich, there are relatively few mechanisms <em>in the
language itself</em>. Its world view might be described as “extreme object orienta- tion.” Two principles will
help you quickly learn to read and write Ruby:</p>
<ol class="arabic simple">
<li><p>Everything is an object—even an integer—and it is literally the case that every operation is a method call on some object and every method call returns a value.</p></li>
<li><p>Like Java and Python, Ruby has conventional classes; but unlike Java public attributes or Python instance variables, only a class’s instance methods—not its instance variables—are visible outside the class. In other words, <em>all</em> access to instance variables from outside the class must take place via public <strong>accessor methods</strong>; instance variables lacking public accessor methods are effectively private. (Python supports a similar approach but doesn’t make it mandatory.)</p></li>
</ol>
<p>Let’s break down our investigation of Ruby according to the elements proposed in the previous section and in light of the above principles.</p>
<p>Types, typing, and names. Ruby is dynamically typed: variables don’t have types, though the objects they refer to do. Hence
<code class="code docutils literal notranslate"><span class="pre">x=’foo’</span> <span class="pre">;</span> <span class="pre">x=3</span></code> is legal. As row1 of Figure2.2 shows, a single or double &#64;-sign precedes names of instance or class (static) variables, while local variables are “barewords”; all must begin with lowercase letters, and <code class="code docutils literal notranslate"><span class="pre">snake_case</span></code> is strongly
preferred over <code class="code docutils literal notranslate"><span class="pre">camelCase</span></code>. Row 2 shows the syntax for other named entities such as classes and constants; all except globals (which you should never use anyway) <em>must</em> begin with a capital letter, with <code class="code docutils literal notranslate"><span class="pre">UpperCamelCase</span></code> used for class names.
(So even though strictly speaking <code class="code docutils literal notranslate"><span class="pre">lowerCamelCase</span></code> is legal for local and instance variables, it’s <em>highly</em> discouraged because it is visually difficult to distinguish from <code class="code docutils literal notranslate"><span class="pre">UpperCamelCase</span></code> and because of the ease with which a typo can
change the former into the latter and cause errors.) The namespaces for each kind of named entity are separate, so that foo, <code class="code docutils literal notranslate"><span class="pre">&#64;foo,</span> <span class="pre">&#64;&#64;foo,</span> <span class="pre">FOO,</span> <span class="pre">Foo,</span> <span class="pre">$FOO</span></code> are all distinct.</p>
<p>In learning any new language, an annoying type-related eye-poke is having to memorize how the language handles Boolean evaluation of non-Boolean expressions.
Some languages have special Boolean types and values, such as Python’s <code class="code docutils literal notranslate"><span class="pre">True</span></code> and <code class="code docutils literal notranslate"><span class="pre">False</span></code> (which have special type <code class="code docutils literal notranslate"><span class="pre">Bool</span></code>), JavaScript <code class="code docutils literal notranslate"><span class="pre">true</span></code> and <code class="code docutils literal notranslate"><span class="pre">false</span></code> (type <code class="code docutils literal notranslate"><span class="pre">boolean</span></code>),
and Ruby’s <code class="code docutils literal notranslate"><span class="pre">true</span></code> and <code class="code docutils literal notranslate"><span class="pre">false</span></code> (<code class="code docutils literal notranslate"><span class="pre">TrueClass</span></code> and <code class="code docutils literal notranslate"><span class="pre">FalseClass</span></code> respectively). To avoid confusion with such actual Boolean literals, developers often say <em>truthy</em> or <em>falsy</em>
to describe the value of a non-Boolean expression <code class="code docutils literal notranslate"><span class="pre">e</span></code> when used in a conditional of the form <code class="code docutils literal notranslate"><span class="pre">if</span> <span class="pre">(e)...</span></code>. Unfortunately, the rules for truthiness are different and largely
arbitrary in each language. In Ruby, the literals <code class="code docutils literal notranslate"><span class="pre">false</span></code> and <code class="code docutils literal notranslate"><span class="pre">nil</span></code> are falsy, but <em>all other values</em>, including the number zero, the empty string, the empty array,
and so forth, are truthy. In contrast, in Python, zero is falsy, but the empty string is truthy; in JavaScript, zero and the empty string are both falsy, as are
the special values <code class="code docutils literal notranslate"><span class="pre">undefined</span></code> and <code class="code docutils literal notranslate"><span class="pre">null</span></code>, but the empty array is truthy; and so on. In languages that include both a true Boolean type and unary logical negation
(usually !), writing as <code class="code docutils literal notranslate"><span class="pre">!!x</span></code> forces the expression to have a Boolean-valued result (for example, if <code class="code docutils literal notranslate"><span class="pre">x</span></code> is falsy, then <code class="code docutils literal notranslate"><span class="pre">!!x</span></code> is the actual Boolean value for false.</p>
<p><strong>Primitives</strong>. Figure 2.2 shows the mostly-unsurprising syntax of basic Ruby elements. Ruby has special Boolean values (row 3) including the special value <code class="code docutils literal notranslate"><span class="pre">nil</span></code>, which is the usual
result of an operation that otherwise would yield no meaningful return value, such as looking up a nonexistent key in a hash or a nonexistent value in an array.</p>
<p>Ruby has no separate “empty result” value such as Python <code class="code docutils literal notranslate"><span class="pre">none</span></code> or JavaScript <code class="code docutils literal notranslate"><span class="pre">null</span></code>.
That is to say: a JavaScript variable whose value is <code class="code docutils literal notranslate"><span class="pre">null</span></code> means that the variable references nothing in particular,
rather than signifiying “falseness” in a Boolean sense, whereas Ruby <code class="code docutils literal notranslate"><span class="pre">nil</span></code> may signal either Boolean falseness or a variable that refers to nothing.</p>
<p>In addition to strings (row 4), Ruby also includes a type called <strong>symbol</strong> (row 4), such as <code class="code docutils literal notranslate"><span class="pre">:octocat</span></code>, essentially an immutable “token” whose value is itself. It is
typically used for enumerations, like an <code class="code docutils literal notranslate"><span class="pre">enum</span></code> type in C or Java, though it has other purposes as well. A
symbol is not the same as a string, but as the figure shows, strings and symbols can be easily converted to each other.</p>
<p>Row 6 and Figure 2.3 summarize Ruby’s straightforward support for manipulating regu- lar expressions and capturing the results of regex matches.
Given the amount of text handling done by modern SaaS apps, mastering regexes and understanding how a new language provides access to a regex
engine is <em>de rigeur</em> for programmers.</p>
<p>Collections (rows 7–9: arrays and hashes) can combine keys and values of different types. Hashes in particular, also called associative arrays or
hashmaps in other languages, are ubiquitous in Ruby.</p>
<p>Every Ruby statement is an expression that returns a value; assignments return the value of their left-hand side, that is, the value of the variable
or other** L-value** that was just assigned to.</p>
<p><strong>Methods</strong>. A method is defined with def <code class="code docutils literal notranslate"><span class="pre">method_name(arg1,...,argN)</span></code> and ends with <code class="code docutils literal notranslate"><span class="pre">end</span></code>. All statements in between are the method definition. All methods
return a value; if a method doesn’t have an explicit <code class="code docutils literal notranslate"><span class="pre">return</span></code> statement, the value of the last expression evaluated in the method is its return value,
which is always well-defined since every Ruby state- ment results in a value.</p>
<p>Everything in Ruby, even a lowly integer, is a full-fledged object that is an instance of some class. Every operation, without exception, are performed by calling a
method on an object. The notation <code class="code docutils literal notranslate"><span class="pre">obj.meth()</span></code> calls method <code class="code docutils literal notranslate"><span class="pre">meth</span></code> on the object <code class="code docutils literal notranslate"><span class="pre">obj</span></code>, which is said to be the <em>receiver</em> and is expected to be able to <em>respond to</em> <code class="code docutils literal notranslate"><span class="pre">meth</span></code>.
For example, the expression <code class="code docutils literal notranslate"><span class="pre">5.class()</span></code> <em>sends</em> the method call <code class="code docutils literal notranslate"><span class="pre">class</span></code> with no arguments to the object <code class="code docutils literal notranslate"><span class="pre">5</span></code>. The <code class="code docutils literal notranslate"><span class="pre">class</span></code> method happens to return the class that an object
belongs to, in this case <code class="code docutils literal notranslate"><span class="pre">Fixnum</span></code>.</p>
<p>As we’ll see in more detail in the next section, Ruby allows omitting parentheses around argument lists when doing so does not result in ambiguous parsing.
Hence <code class="code docutils literal notranslate"><span class="pre">5.class</span></code> is equivalent to <code class="code docutils literal notranslate"><span class="pre">5.class()</span></code>.</p>
<p>Furthermore, since everything is an object, the result of every expression is, by definition, something on which you can call other methods. Hence <code class="code docutils literal notranslate"><span class="pre">(5.class).superclass</span></code>
tells you what <code class="code docutils literal notranslate"><span class="pre">Fixnum</span></code>’s superclass is, by sending the <code class="code docutils literal notranslate"><span class="pre">superclass</span></code> method call with no arguments to <code class="code docutils literal notranslate"><span class="pre">Fixnum</span></code>, an object representing the class to which <code class="code docutils literal notranslate"><span class="pre">5</span></code> belongs.
Method calls associate to the left, so this example could be written <code class="code docutils literal notranslate"><span class="pre">5.class.superclass</span></code>. Such <em>method chaining</em> is extremely idiomatic in Ruby.</p>
<p>As Figure 2.4 shows, even basic math operations and array references are actually method calls on their receivers. Hence, concepts such as <strong>type casting</strong> rarely apply in Ruby:
while you can certainly call <code class="code docutils literal notranslate"><span class="pre">5.to_s</span></code> or <code class="code docutils literal notranslate"><span class="pre">&quot;5&quot;.to_i</span></code> to convert between strings and integers, for example, writing <code class="code docutils literal notranslate"><span class="pre">a+b</span></code> means calling method <code class="code docutils literal notranslate"><span class="pre">+</span></code> on receiver a, so the behavior depends
entirely on how <code class="code docutils literal notranslate"><span class="pre">a</span></code>’s class (or one of its ancestors or mix-ins) implements the instance method <code class="code docutils literal notranslate"><span class="pre">+</span></code>. Hence, both <code class="code docutils literal notranslate"><span class="pre">3+2</span></code> and <code class="code docutils literal notranslate"><span class="pre">&quot;foo&quot;+&quot;bar&quot;</span></code> are legal Ruby expressions, but the first one
calls <code class="code docutils literal notranslate"><span class="pre">+</span></code> as defined in <code class="code docutils literal notranslate"><span class="pre">Numeric</span></code> (the ancestor class of <code class="code docutils literal notranslate"><span class="pre">Fixnum</span></code>) whereas the second calls <code class="code docutils literal notranslate"><span class="pre">+</span></code> as defined
in <code class="code docutils literal notranslate"><span class="pre">String</span></code>. Rubyists write <code class="code docutils literal notranslate"><span class="pre">ClassName#method</span></code> to indicate the instance method <code class="code docutils literal notranslate"><span class="pre">method</span></code> in <code class="code docutils literal notranslate"><span class="pre">ClassName</span></code> and <code class="code docutils literal notranslate"><span class="pre">ClassName.method</span></code> to indicate the class (static) method method in <code class="code docutils literal notranslate"><span class="pre">ClassName</span></code>.
We can therefore say that the expression <code class="code docutils literal notranslate"><span class="pre">3+2</span></code> results in calling <code class="code docutils literal notranslate"><span class="pre">Fixnum#+</span></code> on the receiver <code class="code docutils literal notranslate"><span class="pre">3</span></code>.</p>
<p><strong>Abstraction and encapsulation.</strong> Ruby supports traditional inheritance, using the notation <code class="code docutils literal notranslate"><span class="pre">class</span> <span class="pre">SubFoo&lt;Foo</span></code> to indicate that <code class="code docutils literal notranslate"><span class="pre">SubFoo</span></code> is a subclass of <code class="code docutils literal notranslate"><span class="pre">Foo</span></code>. A class can
inherit from at most one superclass (Ruby lacks multiple inheritance), and all classes ultimately inherit from <code class="code docutils literal notranslate"><span class="pre">BasicObject</span></code>, sometimes called the <em>root class</em>, which has
no superclass. As with most languages that support inheritance, if an object receives a call for a method not defined in its class, the call will be passed up to the superclass,
and so on until the root class is reached or an <em>undefined method</em> exception is raised. The default constructor for a class must be a method named <code class="code docutils literal notranslate"><span class="pre">initialize</span></code>, but it is always
called as <code class="code docutils literal notranslate"><span class="pre">Foo.new</span></code>—that is an idiosyncrasy of the language. Classes can have both class (static) methods and instance methods, and both class (static) variables and instance
variables. Class variable names begin with <code class="code docutils literal notranslate"><span class="pre">&#64;&#64;</span></code> and instance variable names begin with <code class="code docutils literal notranslate"><span class="pre">&#64;</span></code>. Class and instance method names look the same.</p>
<p>Probably most surprising thing to newcomers learning about Ruby’s class machinery is that there is <em>no direct access</em> to class or <em>instance variables</em> from outside the class at all.
In other languages, certain instance variables of a class can be declared public, such as attributes in Java. In Ruby, access to class or instance state must be through <strong>getter
and setter methods</strong>, also collectively called <em>accessor methods</em>. Figure 2.5 shows examples of getters (lines 10–12, 16), setters (lines 13–15: note that setter methods conventionally
have names ending in <code class="code docutils literal notranslate"><span class="pre">=</span></code>, allowing syntax such as line 33 shows), and a simple instance method that accesses other instance variables (line 18). From the caller’s point of view in
lines 33–34, it is impossible to tell whether a given method simply “wraps” access to an instance variable (as <code class="code docutils literal notranslate"><span class="pre">title</span></code> does) or produces its result by computing something
(as <code class="code docutils literal notranslate"><span class="pre">full_title</span></code> does). This design choice illustrates Ruby’s hard-line position on the <strong>Uniform Access Principle</strong>, which concerns one aspect of <strong>encapsulation</strong> in object-oriented programming:
It should be impossible to determine the implementation details of an object’s state or its operations from outside the object.</p>
<p>Beware! If you’re used to Java or Python, it’s very easy to think of the syntax in line 33
as <em>assignment to an attribute or instance variable</em>, but it is just a method call, and in fact could be written as <code class="code docutils literal notranslate"><span class="pre">beautiful.send(’title=’,</span> <span class="pre">’La</span> <span class="pre">vita</span> <span class="pre">e</span> <span class="pre">bella’)</span></code>.
Furthermore, note that any instance variable that has not previously been assigned to will silently evaluate to <code class="code docutils literal notranslate"><span class="pre">nil</span></code>.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Movie</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span>
        <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
        <span class="vi">@year</span> <span class="o">=</span> <span class="n">year</span>
    <span class="k">end</span>
    <span class="c1"># class (static) methods - &#39;self&#39; refers to the actual class</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_in_tmdb</span><span class="p">(</span><span class="n">title_words</span><span class="p">)</span>
        <span class="c1"># call TMDb to search for a movie...</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">title</span>
        <span class="vi">@title</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">title=</span><span class="p">(</span><span class="n">new_title</span><span class="p">)</span>
        <span class="vi">@title</span> <span class="o">=</span> <span class="n">new_title</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">year</span> <span class="p">;</span> <span class="vi">@year</span> <span class="p">;</span> <span class="k">end</span>
    <span class="c1"># note: no way to modify value of @year after initialized</span>
    <span class="k">def</span> <span class="nf">full_title</span> <span class="p">;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="vi">@year</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># A more concise and Rubyistic version of class definition:</span>
<span class="k">class</span> <span class="nc">Movie</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_in_tmdb</span><span class="p">(</span><span class="n">title_words</span><span class="p">)</span>
        <span class="c1"># call TMDb to search for a movie...</span>
    <span class="k">end</span>
    <span class="kp">attr_accessor</span> <span class="ss">:title</span> <span class="c1"># can read and write this attribute</span>
    <span class="kp">attr_reader</span> <span class="ss">:year</span>    <span class="c1"># can only read this attribute</span>
    <span class="k">def</span> <span class="nf">full_title</span> <span class="p">;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="vi">@year</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Example use of the Movie class</span>
<span class="n">beautiful</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Life is Beautiful&#39;</span><span class="p">,</span> <span class="s1">&#39;1997&#39;</span><span class="p">)</span>
<span class="n">beautiful</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;La vita e bella&#39;</span>
<span class="n">beautiful</span><span class="o">.</span><span class="n">full_title</span>    <span class="c1">#   =&gt; &quot;La vita e bella (1997)&quot;</span>
<span class="n">beautiful</span><span class="o">.</span><span class="n">year</span> <span class="o">=</span> <span class="mi">1998</span>   <span class="c1"># =&gt; ERROR: no method &#39;year=&#39;</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1">#  Time#now, Time#+ and Time#- represent time as &#39;seconds since 1/1/70&#39;</span>
<span class="k">class</span> <span class="nc">Fixnum</span>
     <span class="k">def</span> <span class="nf">seconds</span>  <span class="p">;</span> <span class="nb">self</span> <span class="p">;</span> <span class="k">end</span>
     <span class="k">def</span> <span class="nf">minutes</span>  <span class="p">;</span> <span class="nb">self</span> <span class="o">*</span> <span class="mi">60</span> <span class="p">;</span> <span class="k">end</span>
     <span class="k">def</span> <span class="nf">hours</span>    <span class="p">;</span> <span class="nb">self</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="p">;</span> <span class="k">end</span>
     <span class="k">def</span> <span class="nf">ago</span>      <span class="p">;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="nb">self</span> <span class="p">;</span> <span class="k">end</span>
     <span class="k">def</span> <span class="nf">from_now</span> <span class="p">;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="nb">self</span> <span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>

<span class="no">Time</span><span class="o">.</span><span class="n">now</span>                <span class="c1"># =&gt; 2018-11-22 16:58:04 +0100</span>
<span class="mi">5</span><span class="o">.</span><span class="n">minutes</span><span class="o">.</span><span class="n">ago</span>           <span class="c1"># =&gt; 2018-11-22 16:53:12 +0100</span>
<span class="mi">5</span><span class="o">.</span><span class="n">minutes</span> <span class="o">-</span> <span class="mi">4</span><span class="o">.</span><span class="n">minutes</span>   <span class="c1"># =&gt; 60</span>
<span class="mi">3</span><span class="o">.</span><span class="n">hours</span><span class="o">.</span><span class="n">from_now</span>        <span class="c1"># =&gt; 2018-11-22 19:58:45 +0100</span>
</pre></div>
</div>
<p><strong>Self-Check 2.3.1.</strong> <em>What is the explicit-send equivalent of each of the following
expressions:</em>  <code class="code docutils literal notranslate"><span class="pre">a&lt;b,</span> <span class="pre">a==b,</span> <span class="pre">x[0],</span> <span class="pre">x[0]=’foo’</span></code>.</p>
<blockquote>
<div><p><code class="code docutils literal notranslate"><span class="pre">a.send(:&lt;,b),</span> <span class="pre">a.send(:==,b),</span> <span class="pre">x.send(:[],0),</span> <span class="pre">x.send(:[]=,0,’foo’)</span></code></p>
</div></blockquote>
<p><strong>Self-Check 2.3.2.</strong> <em>Verify in an interactive Ruby interpreter that</em> <code class="code docutils literal notranslate"><span class="pre">5/4</span></code> <em>gives 1, but</em> <code class="code docutils literal notranslate"><span class="pre">5/4.0</span></code> <em>and</em>
<code class="code docutils literal notranslate"><span class="pre">5.0/4</span></code> <em>both give</em> 1.25. <em>Explain this behavior by identifying which class’s / method is called
in each case, and how you think it handles its argument.</em></p>
<blockquote>
<div><p>In <code class="code docutils literal notranslate"><span class="pre">5/4</span></code> and <code class="code docutils literal notranslate"><span class="pre">5/4.0</span></code>, the Integer class’s / instance method is called on the receiver 5. That method performs integer
division if its argument is also an integer, but if its argument is a float, it converts the receiver to a float and
performs floating-point division. In <code class="code docutils literal notranslate"><span class="pre">5.0/4</span></code>, the <code class="code docutils literal notranslate"><span class="pre">Float</span></code> class’s / method is called, which always performs floating-point division.</p>
</div></blockquote>
<p><strong>Self-Check 2.3.3.</strong> <em>Why is</em> <code class="code docutils literal notranslate"><span class="pre">movie.&#64;year=1998</span></code> <em>not a substitute for</em> <code class="code docutils literal notranslate"><span class="pre">movie.year=1998</span></code>?</p>
<blockquote>
<div><p>The notation <code class="code docutils literal notranslate"><span class="pre">a.b</span></code> always means “call method <code class="code docutils literal notranslate"><span class="pre">b</span></code> on receiver <code class="code docutils literal notranslate"><span class="pre">a</span></code>”, but <code class="code docutils literal notranslate"><span class="pre">&#64;year</span></code> is the name of an instance variable,
whereas <code class="code docutils literal notranslate"><span class="pre">year=</span></code> is the name of an instance method.</p>
</div></blockquote>
<p><strong>Self-Check 2.3.4.</strong> <em>Suppose we delete line 12 from Figure 2.5. What would be the result of executing</em> <code class="code docutils literal notranslate"><span class="pre">Movie.new(’Inception’,2011).year</span></code> <em>?</em></p>
<blockquote>
<div><p>Ruby would complain that the year method is undefined.</p>
</div></blockquote>
<p><strong>Self-Check 2.3.5.</strong> <em>In Figure 2.6, is</em> <code class="code docutils literal notranslate"><span class="pre">Time.now</span></code> <em>a class method or an instance
method?</em></p>
<blockquote>
<div><p>The fact that its receiver is a class name <code class="code docutils literal notranslate"><span class="pre">(Time)</span></code> tells us it’s a class method.</p>
</div></blockquote>
<p><strong>Self-Check 2.3.6.</strong> <em>Why does</em> <code class="code docutils literal notranslate"><span class="pre">5.superclass</span></code> <em>result in an “undefined method” error? (Hint: consider the
difference between calling</em> <code class="code docutils literal notranslate"><span class="pre">superclass</span></code> <em>on</em> 5 <em>itself vs. calling it on the object returned by</em> <code class="code docutils literal notranslate"><span class="pre">5.class</span></code> <em>.
)</em></p>
<blockquote>
<div><p><code class="code docutils literal notranslate"><span class="pre">superclass</span></code> is a method defined on classes. The object <code class="code docutils literal notranslate"><span class="pre">5</span></code> is not itself a class, so you can’t call
<code class="code docutils literal notranslate"><span class="pre">superclass</span></code> on it</p>
</div></blockquote>
<p><strong>Self-Check 2.3.7.</strong> <em>Which of the following Ruby expressions are equal to each other: (a)</em> <code class="code docutils literal notranslate"><span class="pre">:foo</span></code> <em>(b)</em> <code class="code docutils literal notranslate"><span class="pre">%q{foo}</span></code> <em>(c)</em> <code class="code docutils literal notranslate"><span class="pre">%Q{foo}</span></code> <em>(d)</em> <code class="code docutils literal notranslate"><span class="pre">’foo’.to_sym</span></code> <em>(e)</em> <code class="code docutils literal notranslate"><span class="pre">:foo.to_s</span></code></p>
<blockquote>
<div><p><strong>(a)</strong> and <strong>(d)</strong> are equal to each other; (b), (c), and (e) are equal to each others</p>
</div></blockquote>
<p><strong>Self-Check 2.3.8.</strong> <em>What is captured by $1 when the string 25 to 1 is matched against each of the following
regexps:</em>
(a) <code class="code docutils literal notranslate"><span class="pre">/(\d+)$/</span></code>
(b) <code class="code docutils literal notranslate"><span class="pre">/^\d+([^0-9]+)/</span></code></p>
<blockquote>
<div><p><strong>(a)</strong> the string “1” <strong>(b)</strong> the string “ to ” (including the leading and trailing spaces)</p>
</div></blockquote>
<p><strong>Self-Check 2.3.9.</strong> <em>Consider line 18 of Figure 2.5. Explain why the following would be an acceptable alternative way to define the</em> <code class="code docutils literal notranslate"><span class="pre">full_title</span></code> <em>method,
and the pros and cons compared to the way it appears in the figure:</em>
<code class="code docutils literal notranslate"><span class="pre">def</span> <span class="pre">full_title</span> <span class="pre">;</span> <span class="pre">&quot;#title</span> <span class="pre">(#year)&quot;;</span> <span class="pre">end</span></code></p>
<blockquote>
<div><p>This version calls the accessor methods title and year rather than accessing the instance variables directly. Doing so decouples the
implementation of this method from the implementations of the underlying state of the movie (title and year).</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="2" title="previous page"><span class="section-number">2.2. </span>Pair Programming</a>
    <a class='right-next' id="next-link" href="4" title="next page"><span class="section-number">2.4. </span>Ruby Idioms: Poetry Mode, Blocks, Duck Typing</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="../../_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>