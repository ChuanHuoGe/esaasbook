
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>12.6. Improving Rendering and Database Performance With Caching &#8212; saasbook  documentation</title>
    
  <%= stylesheet_link_tag "theme.css" %>
  <%= stylesheet_link_tag "index.c5995385ac14fb8791e8eb36b4908be2.css" %>

    
  
  <%= stylesheet_link_tag "all.min.css" %>
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="esaasbook/app/assets/stylesheets/_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
     <%= stylesheet_link_tag "pygments.css" %>
     <%= stylesheet_link_tag "sphinx-book-theme.acff12b8f9c144ce68a297486a2fa670.css" %>
    
  <link rel="preload" as="script" href="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="esaasbook/app/assets/stylesheets/_static/documentation_options.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/jquery.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/underscore.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/doctools.js"></script>
    <script src="esaasbook/app/assets/stylesheets/_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="12.7. Avoiding Abusive Database Queries" href="7" />
    <link rel="prev" title="12.5. Monitoring and Finding Bottlenecks" href="5" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          
<div class="col-12 col-md-3 bd-sidebar site-navigation show" id="site-navigation">
    
        <div class="navbar-brand-box">
    <a class="navbar-brand text-wrap" href="../..">
      
      
      <h1 class="site-logo" id="site-title">saasbook  documentation</h1>
      
    </a>
</div><form class="bd-search d-flex align-items-center" action="../../search" method="get">
  <i class="icon fas fa-search"></i>
  <input type="search" class="form-control" name="q" id="search-input" placeholder="Search the docs ..." aria-label="Search the docs ..." autocomplete="off" >
</form><nav class="bd-links" id="bd-docs-nav" aria-label="Main navigation">
    <div class="bd-toc-item active">
        <ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../../../preface">
   Preface
  </a>
 </li>
</ul>
<ul class="current nav bd-sidenav">
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/1">
   1. Introduction to Software as a Service, Agile Development, and Cloud Computing
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-1" name="toctree-checkbox-1" type="checkbox"/>
  <label for="toctree-checkbox-1">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/1">
     1.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/2">
     1.2. Software Development Processes: Plan and Document
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/3">
     1.3. Software Development Processes: The Agile Manifesto
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/4">
     1.4. Software Quality Assurance: Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/5">
     1.5. Productivity: Conciseness, Synthesis, Reuse, and Tools
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/6">
     1.6. SaaS and Service Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/7">
     1.7. Deploying SaaS: Cloud Computing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/8">
     1.8. Deploying SaaS: Browsers and Mobile
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/9">
     1.9. Beautiful vs. Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/10">
     1.10. Guided Tour and How To Use This Book
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/11">
     1.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/12">
     1.12. Concluding Remarks: Software Engineering Is More Than Programming
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/2">
   2. How to Learn a New Language
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-2" name="toctree-checkbox-2" type="checkbox"/>
  <label for="toctree-checkbox-2">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/1">
     2.1. Prelude: Learning to Learn Languages and Frameworks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/2">
     2.2. Pair Programming
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/3">
     2.3. Introducing Ruby,an Object-Oriented Language
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/4">
     2.4. Ruby Idioms: Poetry Mode, Blocks, Duck Typing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/5">
     2.5. CHIPS: Ruby Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/6">
     2.6. Gems and Bundler: Library Management in Ruby
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/7">
     2.7. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/8">
     2.8. Concluding Remarks: How (Not) To Learn a Language By Googling
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/3">
   3. SaaS Application Architecture: Microservices, APIs, and REST
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-3" name="toctree-checkbox-3" type="checkbox"/>
  <label for="toctree-checkbox-3">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/1">
     3.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/2">
     3.2. SaaS Communication Uses HTTP Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/3">
     3.3. CHIPS: HTTP and URIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/4">
     3.4. From Web Sites to Microservices: Service-Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/5">
     3.5. RESTful APIs: Everything is a Resource
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/6">
     3.6. RESTful URIs, API Calls, and JSON
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/7">
     3.7. CHIPS: Create and Deploy a Simple SaaS App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/8">
     3.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/9">
     3.9. Concluding Remarks: Continuity From CGI to SOA
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/4">
   4. SaaS Framework: Rails as a Model–View–Controller Framework
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-4" name="toctree-checkbox-4" type="checkbox"/>
  <label for="toctree-checkbox-4">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/1">
     4.1. The Model–View–Controller (MVC) Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/2">
     4.2. Rails Models: Databases and Active Record
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/3">
     4.3. CHIPS: ActiveRecord Basics
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/4">
     4.4. Routes, Controllers, and Views
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/5">
     4.5. CHIPS: Rails Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/6">
     4.6. Forms
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/7">
     4.7. CHIPS: Hangperson on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/8">
     4.8. Debugging: When Things Go Wrong
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/9">
     4.9. CHIPS: Hello Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/10">
     4.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/11">
     4.11. Concluding Remarks: Rails as a Service Framework
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/5">
   5. SaaS Framework: Advanced Programming Abstractions for SaaS
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-5" name="toctree-checkbox-5" type="checkbox"/>
  <label for="toctree-checkbox-5">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/1">
     5.1. DRYing Out MVC: Partials, Validations and Filters
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/2">
     5.2. Single Sign-On and Third-Party Authentication
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/3">
     5.3. CHIPS: Rails Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/4">
     5.4. Associations and Foreign Keys
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/5">
     5.5. Through-Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/6">
     5.6. RESTful Routes for Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/7">
     5.7. CHIPS: Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/8">
     5.8. Other Types of Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/9">
     5.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/10">
     5.10. Concluding Remarks: Languages, Productivity, and Beauty
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/6">
   6. Mobile and Desktop SaaS Clients: JavaScript Introduction
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-6" name="toctree-checkbox-6" type="checkbox"/>
  <label for="toctree-checkbox-6">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/1">
     6.1. JavaScript: The Big Picture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/2">
     6.2. Introducing ECMAScript
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/3">
     6.3. Classes, Functions and Constructors
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/4">
     6.4. The Document Object Model (DOM) and jQuery
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/5">
     6.5. The DOM and Accessibility
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/6">
     6.6. Events and Callbacks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/7">
     6.7. AJAX: Asynchronous JavaScript And XML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/8">
     6.8. Testing Java Script and AJAX
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/9">
     6.9. CHIPS: AJAX Enhancements to RottenPotatoes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/10">
     6.10. Single-Page Apps and JSON APIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/11">
     6.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/12">
     6.12. Concluding Remarks: JavaScript Past, Present and Future
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/7">
   7. Requirements: BDD and User Stories
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-7" name="toctree-checkbox-7" type="checkbox"/>
  <label for="toctree-checkbox-7">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/1">
     7.1. Behavior-Driven Design and User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/2">
     7.2. SMART User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/3">
     7.3. Lo-Fi User Interface Sketches and Storyboards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/4">
     7.4. Points and Velocity
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/5">
     7.5. Agile Cost Estimation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/6">
     7.6. Cucumber: From User Stories to Acceptance Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/7">
     7.7. CHIPS: Intro to BDD and Cucumber
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/8">
     7.8. Explicit vs. Implicit and Imperative vs. Declarative Scenarios
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/9">
     7.9. The Plan-And-Document Perspective on Documentation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/10">
     7.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/11">
     7.11. Concluding Remarks: Pros and Cons of BDD
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/8">
   8. Testing: Test-Driven Development
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-8" name="toctree-checkbox-8" type="checkbox"/>
  <label for="toctree-checkbox-8">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/1">
     8.1. FIRST, TDD, and Red–Green–Refactor
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/2">
     8.2. Anatomy of a Test Case: Arrange, Act, Assert
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/3">
     8.3. Isolating Code: Doubles and Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/4">
     8.4. Stubbing the Internet
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/5">
     8.5. CHIPS: Intro to RSpec on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/6">
     8.6. Fixtures and Factories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/7">
     8.7. Coverage Concepts and Types of Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/8">
     8.8. Other Testing Approaches and Terminology
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/9">
     8.9. CHIPS:The Acceptance Test/Unit Test Cycle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/10">
     8.10. The Plan-And-Document Perspective on Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/11">
     8.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/12">
     8.12. Concluding Remarks: TDD vs. Conventional Debugging
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/9">
   9. Software Maintenance: Enhancing Legacy Software Using Refactoring and Agile Methods
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-9" name="toctree-checkbox-9" type="checkbox"/>
  <label for="toctree-checkbox-9">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/1">
     9.1. What Makes Code “Legacy” and How Can Agile Help?
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/2">
     9.2. Exploring a Legacy Codebase
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/3">
     9.3. Establishing Ground Truth With Characterization Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/4">
     9.4. Comments and Commits: Documenting Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/5">
     9.5. Metrics, CodeSmells, and SOFA
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/6">
     9.6. Method-Level Refactoring: Replacing Dependencies With Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/7">
     9.7. The Plan-And-Document Perspective on Working With Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/8">
     9.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/9">
     9.9. Concluding Remarks: Continuous Refactoring
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/10">
   10. Agile Teams
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-10" name="toctree-checkbox-10" type="checkbox"/>
  <label for="toctree-checkbox-10">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/1">
     10.1. It Takes a Team: Two-Pizza and Scrum
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/2">
     10.2. Using Branches Effectively
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/3">
     10.3. Pull Requests and Code Reviews
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/4">
     10.4. Delivering the Backlog Using Continuous Integration
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/5">
     10.5. CHIPS: Agile Iterations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/6">
     10.6. Reporting and Fixing Bugs: The Five R’s
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/7">
     10.7. The Plan-And-Document Perspective on Managing Teams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/8">
     10.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/9">
     10.9. Concluding Remarks: From Solo Developer to Teams of Teams
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/11">
   11. Design Patterns for SaaS Apps
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-11" name="toctree-checkbox-11" type="checkbox"/>
  <label for="toctree-checkbox-11">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/1">
     11.1. Patterns, Antipatterns, and SOLID Class Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/2">
     11.2. Just Enough UML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/3">
     11.3. Single Responsibility Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/4">
     11.4. Open/Closed Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/5">
     11.5. Liskov Substitution Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/6">
     11.6. Dependency Injection Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/7">
     11.7. Demeter Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/8">
     11.8. The Plan-And-Document Perspective on Design Patterns
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/9">
     11.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/11/section/10">
     11.10. Concluding Remarks: Frameworks Capture Design Patterns
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 current active has-children">
  <a class="reference internal" href="..">
   12. Dev/Ops
  </a>
  <input checked="" class="toctree-checkbox" id="toctree-checkbox-12" name="toctree-checkbox-12" type="checkbox"/>
  <label for="toctree-checkbox-12">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul class="current">
   <li class="toctree-l2">
    <a class="reference internal" href="1">
     12.1. From Development to Deployment
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="2">
     12.2. Three-Tier Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="3">
     12.3. Responsiveness, Service Level Objectives, and Apdex
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="4">
     12.4. Releases and Feature Flags
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="5">
     12.5. Monitoring and Finding Bottlenecks
    </a>
   </li>
   <li class="toctree-l2 current active">
    <a class="current reference internal" href="#">
     12.6. Improving Rendering and Database Performance With Caching
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="7">
     12.7. Avoiding Abusive Database Queries
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="8">
     12.8. CHIPS: Exploiting Caching and Indices
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="9">
     12.9. Security: Defending Customer Data in Your App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="10">
     12.10. The Plan-And-Document Perspective on Operations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="11">
     12.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="12">
     12.12. Concluding Remarks: Beyond PaaS Basics
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/13">
   13. Afterword
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-13" name="toctree-checkbox-13" type="checkbox"/>
  <label for="toctree-checkbox-13">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/1">
     13.1. Looking Backwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/2">
     13.2. Looking Forwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/3">
     13.3. Essential Readings
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/4">
     13.4. Last Words
    </a>
   </li>
  </ul>
 </li>
</ul>

    </div>
</nav> <!-- To handle the deprecated key -->

<div class="navbar_extra_footer">
  Theme by the <a href="https://ebp.jupyterbook.org">Executable Book Project</a>
</div>

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter12/sub-chapter6.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="improving-rendering-and-database-performance-with-caching">
<h1><span class="section-number">12.6. </span>Improving Rendering and Database Performance With Caching<a class="headerlink" href="#improving-rendering-and-database-performance-with-caching" title="Permalink to this headline">¶</a></h1>
<blockquote>
<div><p><em>There are only two hard things in computer science: cache invalidation and naming things.</em></p>
<p class="attribution">—Phil Karlton</p>
</div></blockquote>
<p>The idea behind caching is simple: information that hasn’t changed since the last time it
was requested can simply be regurgitated rather than recomputed. In SaaS, caching can help
two kinds of computation. First, if information needed from the database to complete an
action hasn’t changed, we can avoid querying the database at all. Second, if the information
underlying a particular view or view fragment hasn’t changed, we can avoid re-rendering the
view (recall that rendering is the process of transforming Erb with embedded Ruby code and
variables into HTML). In any caching scenario, we must address two issues:</p>
<ol class="arabic simple">
<li><p><strong>Naming:</strong> how do we specify that the result of some computation should be cached for later reuse, and name it in a way that ensures it will be used only when that exact same computation is called for?</p></li>
<li><p><strong>Expiration:</strong> How do we detect when the cached version is out of date (stale) because the information on which it depends has changed, and how do we remove it from the cache? The variant of this problem that arises in microprocessor design is often referred to as <em>cache invalidation</em>.</p></li>
</ol>
<p>Figure 12.4 shows how caching can be used at each tier in the 3-tier SaaS architecture and what
Rails entities are cached at each level. The simplest thing we could do is cache the entire HTML
page resulting from rendering a particular controller action. For example, the
<code class="code docutils literal notranslate"><span class="pre">MoviesController#show</span></code> action and its corresponding view depend only on the attributes of the
particular movie being displayed (the <code class="code docutils literal notranslate"><span class="pre">&#64;movie</span></code> variable in the controller method and view
template). Figure 12.5 shows how to cache the entire HTML page for a movie, so
that future requests to that page neither access the database nor re-render the HTML, as
in Figure 12.4(b).</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="c1"># In Gemfile, include gems for page and action caching</span>
<span class="linenos">2</span><span class="n">gem</span> <span class="s1">&#39;actionpack -page_caching&#39;</span>
<span class="linenos">3</span><span class="n">gem</span> <span class="s1">&#39;actionpack -action_caching&#39;</span>
<span class="linenos">4</span><span class="n">gem</span> <span class="s1">&#39;rails-observers&#39;</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="k">class</span> <span class="nc">MoviesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
<span class="linenos">2</span>    <span class="n">caches_page</span> <span class="ss">:show</span>
<span class="linenos">3</span>    <span class="n">cache_sweeper</span> <span class="ss">:movie_sweeper</span>
<span class="linenos">4</span>    <span class="k">def</span> <span class="nf">show</span>
<span class="linenos">5</span>        <span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
<span class="linenos">6</span>    <span class="k">end</span>
<span class="linenos">7</span><span class="k">end</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">MovieSweeper</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Caching</span><span class="o">::</span><span class="no">Sweeper</span>
<span class="linenos"> 2</span>    <span class="n">observe</span> <span class="no">Movie</span>
<span class="linenos"> 3</span>    <span class="c1"># if a movie is created or deleted, movie list becomes invalid</span>
<span class="linenos"> 4</span>    <span class="c1">#   and rendered partials become invalid</span>
<span class="linenos"> 5</span>    <span class="k">def</span> <span class="nf">after_save</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span>    <span class="p">;</span> <span class="n">invalidate</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 6</span>    <span class="k">def</span> <span class="nf">after_destroy</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span> <span class="p">;</span> <span class="n">invalidate</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 7</span>    <span class="kp">private</span>
<span class="linenos"> 8</span>    <span class="k">def</span> <span class="nf">invalidate</span>
<span class="linenos"> 9</span>        <span class="n">expire_action</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;show&#39;</span><span class="o">]</span>
<span class="linenos">10</span>        <span class="n">expire_fragment</span> <span class="s1">&#39;movie&#39;</span>
<span class="linenos">11</span>    <span class="k">end</span>
<span class="linenos">12</span><span class="k">end</span>
</pre></div>
</div>
<p>Of course, this is unsuitable for controller actions protected by before-filters, such as
pages that require the user to be logged in and therefore require executing the controller
filter. In such cases, changing <code class="code docutils literal notranslate"><span class="pre">caches_page</span></code> to <code class="code docutils literal notranslate"><span class="pre">caches_action</span></code> will still execute any filters
but allow Rails to deliver a cached page without consulting the database or re-rendering
views, as in Figure 12.4(c). Figure 12.7 shows the benefits of page and action caching for
this simple example. Note that in Rails page caching, the name of the cached object <em>ignores</em>
embedded parameters in URIs such as <code class="code docutils literal notranslate"><span class="pre">/movies?ratings=PG+G</span></code>, so parameters that affect how the
page would be displayed should instead be part of the RESTful route, as in <code class="code docutils literal notranslate"><span class="pre">/movies/ratings/</span> <span class="pre">PG+G</span></code>.</p>
<p>An in-between case involves action caching in which the main page content doesn’t change, but
the layout does. For example, your <code class="code docutils literal notranslate"><span class="pre">app/views/layouts/application.html.erb</span></code> may include a message
such as “Welcome, Alice” contain- ing the name of the logged-in user. To allow action caching to
work properly in this case, passing <code class="code docutils literal notranslate"><span class="pre">:layout=&gt;false</span></code> to <code class="code docutils literal notranslate"><span class="pre">caches_action</span></code> will result in the layout
getting fully re-rendered but the action (content part of the page) taking advantage of the
action cache. Keep in mind that since the controller action won’t be run, any such dynamic
content appearing in the layout must be set up in a before-filter.</p>
<p>Page-level caching isn’t useful for pages whose content changes dynamically. For example,
the list of movies page (<code class="code docutils literal notranslate"><span class="pre">MoviesController#index</span></code> action) changes when new movies are added
or when the user filters the list by MPAA rating. But we can still benefit from caching by
observing that the index page consists largely of a collection of table rows, each of which
depends only on the attributes of one specific movie. Indeed, that observation allowed us to
factor out the code for one row into a partial, as Figure 5.1 (Section 5.1) showed. Figure 12.6
shows how a trivial change to that partial caches the rendered HTML fragment corresponding to
each movie.</p>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="cp">&lt;%</span> <span class="n">cache</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="linenos">2</span><span class="x">    &lt;div class=&quot;row&quot;&gt;</span>
<span class="linenos">3</span><span class="x">        &lt;div class=&quot;col-8&quot;&gt; </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">movie</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">movie_path</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"> &lt;/div&gt;</span>
<span class="linenos">4</span><span class="x">        &lt;div class=&quot;col-2&quot;&gt; </span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">rating</span> <span class="cp">%&gt;</span><span class="x"> &lt;/div&gt;</span>
<span class="linenos">5</span><span class="x">        &lt;div class=&quot;col-2&quot;&gt; </span><span class="cp">&lt;%=</span> <span class="n">movie</span><span class="o">.</span><span class="n">release_date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%F&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"> &lt;/div&gt;</span>
<span class="linenos">6</span><span class="x">        &lt;/div&gt;</span>
<span class="linenos">7</span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</pre></div>
</div>
<p>A convenient shortcut provided by Rails is that if the argument to cache is an ActiveRecord
object whose table includes an <code class="code docutils literal notranslate"><span class="pre">updated_at</span></code> or <code class="code docutils literal notranslate"><span class="pre">updated_on</span></code> column, the cache will auto-expire a
fragment if its table row has been updated since the fragment was first cached. Nonetheless,
for clarity, line 10 of the sweeper in Figure 12.5 shows how to explicitly expire a fragment
whose name matches the argument of cache whenever the underlying <code class="code docutils literal notranslate"><span class="pre">movie</span></code> object is saved or
destroyed.</p>
<p>Unlike action caching, which avoids running the controller action at all, checking the fragment
cache occurs <em>after</em> the controller action has run. Given this fact, you may already be wondering
how fragment caching helps reduce the load on the database. For example, suppose we add a partial
to the list of movies page to display the <code class="code docutils literal notranslate"><span class="pre">&#64;top_5</span></code> movies based on
average review scores, and we add a line to the index controller action to set up the variable:</p>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="x">&lt;!-- a cacheable partial for top movies --&gt;</span>
<span class="linenos">2</span><span class="cp">&lt;%-</span> <span class="n">cache</span><span class="p">(</span><span class="s1">&#39;top_moviegoers&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="linenos">3</span><span class="x">    &lt;ul id=&quot;topmovies&quot;&gt;</span>
<span class="linenos">4</span><span class="x">        </span><span class="cp">&lt;%-</span> <span class="vi">@top_5</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">movie</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="linenos">5</span><span class="x">        &lt;li&gt; </span><span class="cp">&lt;%=</span> <span class="n">moviegoer</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x"> &lt;/li&gt;</span>
<span class="linenos">6</span><span class="x">        </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="linenos">7</span><span class="x">    &lt;/ul&gt;</span>
<span class="linenos">8</span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos">1</span><span class="k">class</span> <span class="nc">MoviegoersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
<span class="linenos">2</span>    <span class="k">def</span> <span class="nf">index</span>
<span class="linenos">3</span>        <span class="vi">@movies</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">all</span>
<span class="linenos">4</span>        <span class="vi">@top_5</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:reviews</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s1">&#39;movie_id&#39;</span><span class="p">)</span><span class="o">.</span>
<span class="linenos">5</span>            <span class="n">order</span><span class="p">(</span><span class="s2">&quot;AVG(potatoes) DESC&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="linenos">6</span>    <span class="k">end</span>
<span class="linenos">7</span><span class="k">end</span>
</pre></div>
</div>
<p>Action caching is now less useful, because the <code class="code docutils literal notranslate"><span class="pre">index</span></code> view may change when a new movie is
added <em>or</em> when a review is added (which might change what the top 5 reviewed movies are).
If the controller action is run before the fragment cache is checked, aren’t we negating
the benefit of caching, since setting <code class="code docutils literal notranslate"><span class="pre">&#64;top_5</span></code> in lines 4–5 of the controller method causes
a database query?</p>
<p>Surprisingly, no. In fact, lines 4–5 <em>don’t</em> cause a query to happen: they construct an object
that can do the query if it’s ever asked for the result! This is called <strong>lazy evaluation</strong>, an
enormously powerful programming-language technique that comes from the <strong>lambda calculus</strong>
underlying functional programming. Lazy evaluation is used in Rails’ ActiveRelation (ARel)
subsystem, which is used by ActiveRecord. The actual database query doesn’t happen until
each is called in line 4 of of the partial, because that’s the first time the ActiveRelation
object is asked to produce a value. But since that line is inside the <code class="code docutils literal notranslate"><span class="pre">cache</span></code> block starting
on line 2, if the fragment cache hits, the line will never be executed and therefore the
database will never be queried. Of course, you must still include logic in your cache sweeper
to correctly expire the top-5-movies fragment when a new review is added.</p>
<p>In summary, both page- and fragment-level caching reward our ability to separate things that
change (non-cacheable units) from those that stay the same (cacheable units). In page or action
caching, split controller actions protected by before-filters into an “unprotected” action that
can use page caching and a filtered action that can use action caching. (In an extreme case,
you can even enlist a <strong>content delivery network</strong> (CDN) such as Amazon CloudFront to replicate the
page at hundreds of servers around the world.) In fragment caching, use partials to isolate each
noncacheable entity, such as a single model instance, into its own partial that can be
fragment-cached.</p>
<p><strong>Self-Check 12.6.1.</strong> <em>We mentioned that passing</em> <code class="code docutils literal notranslate"><span class="pre">:layout=&gt;false</span></code> <em>to</em> <code class="code docutils literal notranslate"><span class="pre">caches_action</span></code>
<em>provides most of the benefit of action caching even when the page layout contains dynamic
elements such as the  logged-in user’s name. Why doesn’t the</em> <code class="code docutils literal notranslate"><span class="pre">caches_page</span></code> <em>method also allow
this option?</em></p>
<blockquote>
<div><p>Since page caching is handled by the presentation tier, not the logic tier, a hit in the page
cache means that Rails is bypassed entirely. The presentation tier has a copy of the whole page,
but only the logic tier knows what part of the page came from the layout and what part came
from rendering the action</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="5" title="previous page"><span class="section-number">12.5. </span>Monitoring and Finding Bottlenecks</a>
    <a class='right-next' id="next-link" href="7" title="next page"><span class="section-number">12.7. </span>Avoiding Abusive Database Queries</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="esaasbook/app/assets/stylesheets/_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>