<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter11/sub-chapter8.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="the-plan-and-document-perspective-on-design-patterns">
<h1><span class="section-number">11.8. </span>The Plan-And-Document Perspective on Design Patterns<a class="headerlink" href="#the-plan-and-document-perspective-on-design-patterns" title="Permalink to this headline">¶</a></h1>
<p>A strength of Plan-and-Document is that careful upfront planning can result in a
product with a good software architecture that uses design patterns well. This
preplanning is reflected in the alternative catch phrase for these processes of <strong>Big
Design Up Front</strong>, as Chapter 1 mentions.</p>
<p>A Plan-and-Document development team starts with the <strong>Software Requirements Specification (SRS)</strong>
(see Section 7.9), which the team breaks into a series of problems. For each one, the team
looks for one or more architecture patterns that might solve the prob- lem. The team then goes
down to the next level of subproblems, and looks for design patterns that match them. The
philosophy is to learn from the experience of others captured as patterns so as to avoid
repeating the mistakes of your predecessors. Another way to get feedback from more experienced
engineers is to hold a <strong>design review</strong> (see Section 10.7). Note that design reviews can be done
before any code is written in Plan-and-Document processes.</p>
<p>Thus, compared to Agile, there is considerably more effort in starting with a good design
in Plan-and-Document. As Martin Fowler points out in his article <em>Is Design Dead?</em>, a
frequent critique of Agile is that it encourages developers to jump in and start coding
without any design, and rely too much on refactoring to fix things later. As the critics
sometimes say, you can build a doghouse by slapping stuff together and planning as you go,
but you can’t build a skyscraper that way.</p>
<p>Agile supporters counter that Plan-and-Document methods are just as bad: by disallowing any
code until the design is complete, it’s impossible to be confident that the design will be
implementable or that it really captures the customer’s needs. This critique especially holds
when the architects/designers will not be writing the code or may be out of touch with current
coding practices and tools. As a result, say Agile proponents, when coding starts, the design
will have to change anyway.</p>
<p>Both sides have a point, but the critique can be phrased in a more nuanced way as “How much
design makes sense up front?” For example, Agile developers plan for persistent storage as part
of their SaaS apps, even though the first BDD and TDD tests they write will not touch the
database. A more subtle example is horizontal scaling. As we alluded to in Chapter 3, and will
discuss more fully in Chapter 12, designers of successful SaaS <em>must</em> think about horizontal
scalability early on. Even though it may be months before scalability matters, design decisions
early in the project can cripple scalability, and it may be difficult to change them without
major rewriting and refactoring.</p>
<p>A possible solution to the conundrum is captured by a rule of thumb in Fowler’s article. If you
have previously done a project that has some design constraint or element, it’s OK to plan for
it in a new project that is similar, because your previous experience will likely lead to
reasonable design decisions this time.</p>
<p><strong>Self-Check 11.8.1.</strong> <em>True or False: Agile design is an oxymoron.</em></p>
<blockquote>
<div><p>False. Although there is no separate design phase in Agile development, the refactoring
that is the norm in Agile can incorporate design patterns.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 11, section_id: 7) %>" title="previous page"><span class="section-number">11.7. </span>Demeter Principle</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 11, section_id: 9) %>" title="next page"><span class="section-number">11.9. </span>Fallacies and Pitfalls</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>
