    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="the-dom-and-accessibility">
<h1><span class="section-number">6.5. </span>The DOM and Accessibility<a class="headerlink" href="#the-dom-and-accessibility" title="Permalink to this headline">¶</a></h1>
<p>Many people navigate a website by clicking on buttons or links. This relies on using a mouse or touchscreen as
well as being able to perceive the visual affordances of the web page. Considering <em>accessibility</em>, sometimes
abbreviated <em>a11y</em>, is about ensuring that your users can access your applications using different input methods.
For example, some users may need (or prefer) to navigate a website using the keyboard, so they must have a way
of “clicking” on a button, perhaps by pressing space on their keyboards. Blind or low-vision users may use <em>screen
reader</em> software that translates text and interactions on screen into audio, and to include these users you must
ensure there’s a way for the computer to generate a text-based description of your page elements. The <code class="code docutils literal notranslate"><span class="pre">alt</span></code> attribute
of an img element, which has been part of HTML since the beginning, is one simple example of providing a textual
alternative to visual element.</p>
<p>Section 1.8 motivated the use of HTML/CSS frameworks. One advantage of a good framework is that it provides some
built-in support for using the techniques we describe in this section to improve your app’s accessibility: using
Semantic HTML to structure your pages, and adding ARIA (Accessible Rich Internet Applications) attributes to give
hints to screen readers.</p>
<p><strong>Semantic HTML.</strong> HTML is very flexible: in principle you can accomplish just about any visual styling using only <code class="code docutils literal notranslate"><span class="pre">div</span></code>
(“divider”) elements with appropriate CSS rules. However, a <code class="code docutils literal notranslate"><span class="pre">div</span></code> doesn’t convey much about the purpose of that element.
<em>Semantic</em> <em>HTML</em> involves choosing the <em>most appropriate</em> HTML element type tag that describes the element’s logical role
on the page, so that (for example) a screen reader can convey that a particular element
is a button, heading, paragraph, or maybe even a timestamp. Beyond accessibility, using the proper HTML element type
communicates your intentions to other developers on the project, and allows search engines to improve their search results.
We distinguish three categories of HTML elements: structural, content, and interactive.</p>
<p><strong>Structural elements</strong> break down large and often visually-distinct sections of a web page, allowing screen readers to
quickly jump between sections:</p>
<ul class="simple">
<li><p><code class="code docutils literal notranslate"><span class="pre">h1...h6</span></code> are elements that give your page an outline. Most pages start with <code class="code docutils literal notranslate"><span class="pre">h1</span></code>.</p></li>
<li><p><code class="code docutils literal notranslate"><span class="pre">nav</span></code> is used for sections of links that direct users to different parts of your website. Commonly, this is used in a “navigation bar” at the top of a web page.</p></li>
<li><p><code class="code docutils literal notranslate"><span class="pre">main</span></code> This is for the body of your web page. There should only be one of these per page.</p></li>
