
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>11.7. Demeter Principle &#8212; saasbook  documentation</title>
    
  <link href="../../_static/css/theme.css" rel="stylesheet" />
  <link href="../../_static/css/index.c5995385ac14fb8791e8eb36b4908be2.css" rel="stylesheet" />

    
  <link rel="stylesheet"
    href="../../_static/vendor/fontawesome/5.13.0/css/all.min.css">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../../_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2">
  <link rel="preload" as="font" type="font/woff2" crossorigin
    href="../../_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2">

    
      

    
    <link rel="stylesheet" type="text/css" href="../../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/sphinx-book-theme.acff12b8f9c144ce68a297486a2fa670.css" />
    
  <link rel="preload" as="script" href="../../_static/js/index.1c5a1a01449ed65a7b51.js">

    <script data-url_root="../../" id="documentation_options" src="../../_static/documentation_options.js"></script>
    <script src="../../_static/jquery.js"></script>
    <script src="../../_static/underscore.js"></script>
    <script src="../../_static/doctools.js"></script>
    <script src="../../_static/sphinx-book-theme.12a9622fbb08dcb3a2a40b2c02b83a57.js"></script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="next" title="11.8. The Plan-And-Document Perspective on Design Patterns" href="8" />
    <link rel="prev" title="11.6. Dependency Injection Principle" href="6" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="docsearch:language" content="en" />
    
  </head>
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="80">
    
    <div class="container-fluid" id="banner"></div>

    

    <div class="container-xl">
      <div class="row">
          
<div class="col-12 col-md-3 bd-sidebar site-navigation show" id="site-navigation">
    
        <div class="navbar-brand-box">
    <a class="navbar-brand text-wrap" href="../..">
      
      
      <h1 class="site-logo" id="site-title">saasbook  documentation</h1>
      
    </a>
</div><form class="bd-search d-flex align-items-center" action="../../search" method="get">
  <i class="icon fas fa-search"></i>
  <input type="search" class="form-control" name="q" id="search-input" placeholder="Search the docs ..." aria-label="Search the docs ..." autocomplete="off" >
</form><nav class="bd-links" id="bd-docs-nav" aria-label="Main navigation">
    <div class="bd-toc-item active">
        <ul class="nav bd-sidenav">
 <li class="toctree-l1">
  <a class="reference internal" href="../../../preface">
   Preface
  </a>
 </li>
</ul>
<ul class="current nav bd-sidenav">
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/1">
   1. Introduction to Software as a Service, Agile Development, and Cloud Computing
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-1" name="toctree-checkbox-1" type="checkbox"/>
  <label for="toctree-checkbox-1">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/1">
     1.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/2">
     1.2. Software Development Processes: Plan and Document
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/3">
     1.3. Software Development Processes: The Agile Manifesto
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/4">
     1.4. Software Quality Assurance: Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/5">
     1.5. Productivity: Conciseness, Synthesis, Reuse, and Tools
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/6">
     1.6. SaaS and Service Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/7">
     1.7. Deploying SaaS: Cloud Computing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/8">
     1.8. Deploying SaaS: Browsers and Mobile
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/9">
     1.9. Beautiful vs. Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/10">
     1.10. Guided Tour and How To Use This Book
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/11">
     1.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/1/section/12">
     1.12. Concluding Remarks: Software Engineering Is More Than Programming
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/2">
   2. How to Learn a New Language
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-2" name="toctree-checkbox-2" type="checkbox"/>
  <label for="toctree-checkbox-2">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/1">
     2.1. Prelude: Learning to Learn Languages and Frameworks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/2">
     2.2. Pair Programming
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/3">
     2.3. Introducing Ruby,an Object-Oriented Language
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/4">
     2.4. Ruby Idioms: Poetry Mode, Blocks, Duck Typing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/5">
     2.5. CHIPS: Ruby Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/6">
     2.6. Gems and Bundler: Library Management in Ruby
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/7">
     2.7. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/2/section/8">
     2.8. Concluding Remarks: How (Not) To Learn a Language By Googling
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/3">
   3. SaaS Application Architecture: Microservices, APIs, and REST
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-3" name="toctree-checkbox-3" type="checkbox"/>
  <label for="toctree-checkbox-3">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/1">
     3.1. Introduction
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/2">
     3.2. SaaS Communication Uses HTTP Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/3">
     3.3. CHIPS: HTTP and URIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/4">
     3.4. From Web Sites to Microservices: Service-Oriented Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/5">
     3.5. RESTful APIs: Everything is a Resource
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/6">
     3.6. RESTful URIs, API Calls, and JSON
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/7">
     3.7. CHIPS: Create and Deploy a Simple SaaS App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/8">
     3.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/3/section/9">
     3.9. Concluding Remarks: Continuity From CGI to SOA
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/4">
   4. SaaS Framework: Rails as a Model–View–Controller Framework
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-4" name="toctree-checkbox-4" type="checkbox"/>
  <label for="toctree-checkbox-4">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/1">
     4.1. The Model–View–Controller (MVC) Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/2">
     4.2. Rails Models: Databases and Active Record
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/3">
     4.3. CHIPS: ActiveRecord Basics
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/4">
     4.4. Routes, Controllers, and Views
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/5">
     4.5. CHIPS: Rails Routes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/6">
     4.6. Forms
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/7">
     4.7. CHIPS: Hangperson on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/8">
     4.8. Debugging: When Things Go Wrong
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/9">
     4.9. CHIPS: Hello Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/10">
     4.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/4/section/11">
     4.11. Concluding Remarks: Rails as a Service Framework
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/5">
   5. SaaS Framework: Advanced Programming Abstractions for SaaS
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-5" name="toctree-checkbox-5" type="checkbox"/>
  <label for="toctree-checkbox-5">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/1">
     5.1. DRYing Out MVC: Partials, Validations and Filters
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/2">
     5.2. Single Sign-On and Third-Party Authentication
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/3">
     5.3. CHIPS: Rails Intro
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/4">
     5.4. Associations and Foreign Keys
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/5">
     5.5. Through-Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/6">
     5.6. RESTful Routes for Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/7">
     5.7. CHIPS: Associations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/8">
     5.8. Other Types of Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/9">
     5.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/5/section/10">
     5.10. Concluding Remarks: Languages, Productivity, and Beauty
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/6">
   6. Mobile and Desktop SaaS Clients: JavaScript Introduction
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-6" name="toctree-checkbox-6" type="checkbox"/>
  <label for="toctree-checkbox-6">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/1">
     6.1. JavaScript: The Big Picture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/2">
     6.2. Introducing ECMAScript
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/3">
     6.3. Classes, Functions and Constructors
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/4">
     6.4. The Document Object Model (DOM) and jQuery
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/5">
     6.5. The DOM and Accessibility
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/6">
     6.6. Events and Callbacks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/7">
     6.7. AJAX: Asynchronous JavaScript And XML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/8">
     6.8. Testing Java Script and AJAX
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/9">
     6.9. CHIPS: AJAX Enhancements to RottenPotatoes
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/10">
     6.10. Single-Page Apps and JSON APIs
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/11">
     6.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/6/section/12">
     6.12. Concluding Remarks: JavaScript Past, Present and Future
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/7">
   7. Requirements: BDD and User Stories
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-7" name="toctree-checkbox-7" type="checkbox"/>
  <label for="toctree-checkbox-7">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/1">
     7.1. Behavior-Driven Design and User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/2">
     7.2. SMART User Stories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/3">
     7.3. Lo-Fi User Interface Sketches and Storyboards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/4">
     7.4. Points and Velocity
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/5">
     7.5. Agile Cost Estimation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/6">
     7.6. Cucumber: From User Stories to Acceptance Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/7">
     7.7. CHIPS: Intro to BDD and Cucumber
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/8">
     7.8. Explicit vs. Implicit and Imperative vs. Declarative Scenarios
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/9">
     7.9. The Plan-And-Document Perspective on Documentation
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/10">
     7.10. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/7/section/11">
     7.11. Concluding Remarks: Pros and Cons of BDD
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/8">
   8. Testing: Test-Driven Development
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-8" name="toctree-checkbox-8" type="checkbox"/>
  <label for="toctree-checkbox-8">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/1">
     8.1. FIRST, TDD, and Red–Green–Refactor
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/2">
     8.2. Anatomy of a Test Case: Arrange, Act, Assert
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/3">
     8.3. Isolating Code: Doubles and Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/4">
     8.4. Stubbing the Internet
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/5">
     8.5. CHIPS: Intro to RSpec on Rails
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/6">
     8.6. Fixtures and Factories
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/7">
     8.7. Coverage Concepts and Types of Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/8">
     8.8. Other Testing Approaches and Terminology
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/9">
     8.9. CHIPS:The Acceptance Test/Unit Test Cycle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/10">
     8.10. The Plan-And-Document Perspective on Testing
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/11">
     8.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/8/section/12">
     8.12. Concluding Remarks: TDD vs. Conventional Debugging
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/9">
   9. Software Maintenance: Enhancing Legacy Software Using Refactoring and Agile Methods
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-9" name="toctree-checkbox-9" type="checkbox"/>
  <label for="toctree-checkbox-9">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/1">
     9.1. What Makes Code “Legacy” and How Can Agile Help?
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/2">
     9.2. Exploring a Legacy Codebase
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/3">
     9.3. Establishing Ground Truth With Characterization Tests
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/4">
     9.4. Comments and Commits: Documenting Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/5">
     9.5. Metrics, CodeSmells, and SOFA
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/6">
     9.6. Method-Level Refactoring: Replacing Dependencies With Seams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/7">
     9.7. The Plan-And-Document Perspective on Working With Legacy Code
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/8">
     9.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/9/section/9">
     9.9. Concluding Remarks: Continuous Refactoring
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/10">
   10. Agile Teams
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-10" name="toctree-checkbox-10" type="checkbox"/>
  <label for="toctree-checkbox-10">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/1">
     10.1. It Takes a Team: Two-Pizza and Scrum
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/2">
     10.2. Using Branches Effectively
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/3">
     10.3. Pull Requests and Code Reviews
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/4">
     10.4. Delivering the Backlog Using Continuous Integration
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/5">
     10.5. CHIPS: Agile Iterations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/6">
     10.6. Reporting and Fixing Bugs: The Five R’s
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/7">
     10.7. The Plan-And-Document Perspective on Managing Teams
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/8">
     10.8. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/10/section/9">
     10.9. Concluding Remarks: From Solo Developer to Teams of Teams
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 current active has-children">
  <a class="reference internal" href="..">
   11. Design Patterns for SaaS Apps
  </a>
  <input checked="" class="toctree-checkbox" id="toctree-checkbox-11" name="toctree-checkbox-11" type="checkbox"/>
  <label for="toctree-checkbox-11">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul class="current">
   <li class="toctree-l2">
    <a class="reference internal" href="1">
     11.1. Patterns, Antipatterns, and SOLID Class Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="2">
     11.2. Just Enough UML
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="3">
     11.3. Single Responsibility Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="4">
     11.4. Open/Closed Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="5">
     11.5. Liskov Substitution Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="6">
     11.6. Dependency Injection Principle
    </a>
   </li>
   <li class="toctree-l2 current active">
    <a class="current reference internal" href="#">
     11.7. Demeter Principle
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="8">
     11.8. The Plan-And-Document Perspective on Design Patterns
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="9">
     11.9. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="10">
     11.10. Concluding Remarks: Frameworks Capture Design Patterns
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/12">
   12. Dev/Ops
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-12" name="toctree-checkbox-12" type="checkbox"/>
  <label for="toctree-checkbox-12">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/1">
     12.1. From Development to Deployment
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/2">
     12.2. Three-Tier Architecture
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/3">
     12.3. Responsiveness, Service Level Objectives, and Apdex
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/4">
     12.4. Releases and Feature Flags
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/5">
     12.5. Monitoring and Finding Bottlenecks
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/6">
     12.6. Improving Rendering and Database Performance With Caching
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/7">
     12.7. Avoiding Abusive Database Queries
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/8">
     12.8. CHIPS: Exploiting Caching and Indices
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/9">
     12.9. Security: Defending Customer Data in Your App
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/10">
     12.10. The Plan-And-Document Perspective on Operations
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/11">
     12.11. Fallacies and Pitfalls
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/12/section/12">
     12.12. Concluding Remarks: Beyond PaaS Basics
    </a>
   </li>
  </ul>
 </li>
 <li class="toctree-l1 has-children">
  <a class="reference internal" href="../../../chapter/13">
   13. Afterword
  </a>
  <input class="toctree-checkbox" id="toctree-checkbox-13" name="toctree-checkbox-13" type="checkbox"/>
  <label for="toctree-checkbox-13">
   <i class="fas fa-chevron-down">
   </i>
  </label>
  <ul>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/1">
     13.1. Looking Backwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/2">
     13.2. Looking Forwards
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/3">
     13.3. Essential Readings
    </a>
   </li>
   <li class="toctree-l2">
    <a class="reference internal" href="../../../chapter/13/section/4">
     13.4. Last Words
    </a>
   </li>
  </ul>
 </li>
</ul>

    </div>
</nav> <!-- To handle the deprecated key -->

<div class="navbar_extra_footer">
  Theme by the <a href="https://ebp.jupyterbook.org">Executable Book Project</a>
</div>

</div>


          


          
<main class="col py-md-3 pl-md-4 bd-content overflow-auto" role="main">
    
    <div class="topbar container-xl fixed-top">
    <div class="topbar-contents row">
        <div class="col-12 col-md-3 bd-topbar-whitespace site-navigation show"></div>
        <div class="col pl-md-4 topbar-main">
            
            <button id="navbar-toggler" class="navbar-toggler ml-0" type="button" data-toggle="collapse"
                data-toggle="tooltip" data-placement="bottom" data-target=".site-navigation" aria-controls="navbar-menu"
                aria-expanded="true" aria-label="Toggle navigation" aria-controls="site-navigation"
                title="Toggle navigation" data-toggle="tooltip" data-placement="left">
                <i class="fas fa-bars"></i>
                <i class="fas fa-arrow-left"></i>
                <i class="fas fa-arrow-up"></i>
            </button>
            
            
<div class="dropdown-buttons-trigger">
    <button id="dropdown-buttons-trigger" class="btn btn-secondary topbarbtn" aria-label="Download this page"><i
            class="fas fa-download"></i></button>

    <div class="dropdown-buttons">
        <!-- ipynb file if we had a myst markdown file -->
        
        <!-- Download raw file -->
        <a class="dropdown-buttons" href="../../_sources/part2/chapter11/sub-chapter7.rst.txt"><button type="button"
                class="btn btn-secondary topbarbtn" title="Download source file" data-toggle="tooltip"
                data-placement="left">.rst</button></a>
        <!-- Download PDF via print -->
        <button type="button" id="download-print" class="btn btn-secondary topbarbtn" title="Print to PDF"
            onClick="window.print()" data-toggle="tooltip" data-placement="left">.pdf</button>
    </div>
</div>

            <!-- Source interaction buttons -->

            <!-- Full screen (wrap in <a> to have style consistency -->

<a class="full-screen-button"><button type="button" class="btn btn-secondary topbarbtn" data-toggle="tooltip"
        data-placement="bottom" onclick="toggleFullScreen()" aria-label="Fullscreen mode"
        title="Fullscreen mode"><i
            class="fas fa-expand"></i></button></a>

            <!-- Launch buttons -->

        </div>

        <!-- Table of contents -->
        <div class="d-none d-md-block col-md-2 bd-toc show">
            
        </div>
    </div>
</div>
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="demeter-principle">
<h1><span class="section-number">11.7. </span>Demeter Principle<a class="headerlink" href="#demeter-principle" title="Permalink to this headline">¶</a></h1>
<p>The Demeter Principle or <strong>Law of Demeter</strong> states informally: “Talk to your friends—don’t get
intimate with strangers.” Specifically, a method can call other methods in its own class,
and methods on the classes of its own instance variables; everything else is taboo. Demeter
isn’t originally part of the SOLID guidelines, as Figure 11.4 explains, but we include it
here since it is highly applicable to Ruby and SaaS, and we opportunistically hijack the <strong>D</strong>
in SOLID to represent it.</p>
<p>The Demeter Principle is easily illustrated by example. Suppose RottenPotatoes has made deals
with movie theaters so that moviegoers can buy movie tickets directly via RottenPotatoes by
maintaining a credit balance (for example, by receiving movie theater gift cards).</p>
<p>Figure 11.21 shows an implementation of this behavior that contains a Demeter Principle
violation. A problem arises if we ever change the implementation of Wallet—for example, if we
change <code class="code docutils literal notranslate"><span class="pre">credit_balance</span></code> to <code class="code docutils literal notranslate"><span class="pre">cash_balance</span></code>, or add <code class="code docutils literal notranslate"><span class="pre">points_balance</span></code> to allow moviegoers to accumulate
PotatoPoints by becoming top reviewers. All of a sudden, the <code class="code docutils literal notranslate"><span class="pre">MovieTheater</span></code> class, which is
“twice removed” from <code class="code docutils literal notranslate"><span class="pre">Wallet</span></code>, would have to change.</p>
<p>Two design smells can tip us off to possible Demeter violations. One is <strong>inappropriate intimacy</strong>:
the <code class="code docutils literal notranslate"><span class="pre">collect_money</span></code> method manipulates the <code class="code docutils literal notranslate"><span class="pre">credit_balance</span></code> attribute of <code class="code docutils literal notranslate"><span class="pre">Wallet</span></code> directly, even
though managing that attribute is the <code class="code docutils literal notranslate"><span class="pre">Wallet</span></code> class’s responsibility. (When the same kind of
inappropriate intimacy occurs repeatedly throughout a class, it’s sometimes called <strong>feature envy</strong>,
because <code class="code docutils literal notranslate"><span class="pre">Moviegoer</span></code> “wishes it had access to” the features managed by <code class="code docutils literal notranslate"><span class="pre">Wallet</span></code>.) Another smell that
arises in tests is the <em>mock trainwreck</em>, which occurs in lines 25–27 of Figure 11.21: to test
code that violates Demeter, we find ourselves setting up a “chain” of mocks that will be used
when we call the method under test.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="c1"># Better: delegate credit_balance so MovieTheater only accesses Moviegoer</span>
<span class="linenos"> 2</span><span class="k">class</span> <span class="nc">Moviegoer</span>
<span class="linenos"> 3</span>    <span class="k">def</span> <span class="nf">credit_balance</span>
<span class="linenos"> 4</span>        <span class="nb">self</span><span class="o">.</span><span class="n">wallet</span><span class="o">.</span><span class="n">credit_balance</span>  <span class="c1"># delegation</span>
<span class="linenos"> 5</span>    <span class="k">end</span>
<span class="linenos"> 6</span><span class="k">end</span>
<span class="linenos"> 7</span><span class="k">class</span> <span class="nc">MovieTheater</span>
<span class="linenos"> 8</span>    <span class="k">def</span> <span class="nf">collect_money</span><span class="p">(</span><span class="n">moviegoer</span><span class="p">,</span><span class="n">amount</span><span class="p">)</span>
<span class="linenos"> 9</span>        <span class="k">if</span> <span class="n">moviegoer</span><span class="o">.</span><span class="n">credit_balance</span> <span class="o">&gt;=</span> <span class="n">amount</span>
<span class="linenos">10</span>        <span class="n">moviegoer</span><span class="o">.</span><span class="n">credit_balance</span> <span class="o">-=</span> <span class="n">due_amount</span>
<span class="linenos">11</span>        <span class="vi">@collected_amount</span> <span class="o">+=</span> <span class="n">due_amount</span>
<span class="linenos">12</span>        <span class="k">else</span>
<span class="linenos">13</span>        <span class="k">raise</span> <span class="no">InsufficientFundsError</span>
<span class="linenos">14</span>        <span class="k">end</span>
<span class="linenos">15</span>    <span class="k">end</span>
<span class="linenos">16</span><span class="k">end</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">Wallet</span>
<span class="linenos"> 2</span>    <span class="kp">attr_reader</span> <span class="ss">:credit_balance</span> <span class="c1"># no longer attr_accessor!</span>
<span class="linenos"> 3</span>    <span class="k">def</span> <span class="nf">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
<span class="linenos"> 4</span>        <span class="k">raise</span> <span class="no">InsufficientFundsError</span> <span class="k">if</span> <span class="n">amount</span> <span class="o">&gt;</span> <span class="vi">@credit_balance</span>
<span class="linenos"> 5</span>        <span class="vi">@credit_balance</span> <span class="o">-=</span> <span class="n">amount</span>
<span class="linenos"> 6</span>        <span class="n">amount</span>
<span class="linenos"> 7</span>    <span class="k">end</span>
<span class="linenos"> 8</span><span class="k">end</span>
<span class="linenos"> 9</span><span class="k">class</span> <span class="nc">Moviegoer</span>
<span class="linenos">10</span>    <span class="c1"># behavior delegation</span>
<span class="linenos">11</span>    <span class="k">def</span> <span class="nf">pay</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
<span class="linenos">12</span>        <span class="n">wallet</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
<span class="linenos">13</span>    <span class="k">end</span>
<span class="linenos">14</span><span class="k">end</span>
<span class="linenos">15</span><span class="k">class</span> <span class="nc">MovieTheater</span>
<span class="linenos">16</span>    <span class="k">def</span> <span class="nf">collect_money</span><span class="p">(</span><span class="n">moviegoer</span><span class="p">,</span> <span class="n">amount</span><span class="p">)</span>
<span class="linenos">17</span>        <span class="vi">@collected_amount</span> <span class="o">+=</span> <span class="n">moviegoer</span><span class="o">.</span><span class="n">pay</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
<span class="linenos">18</span>    <span class="k">end</span>
<span class="linenos">19</span><span class="k">end</span>
</pre></div>
</div>
<p>Once again, delegation comes to the rescue. A simple improvement comes from delegating the
<code class="code docutils literal notranslate"><span class="pre">credit_balance</span></code> attribute, as Figure 11.22 (top) shows. But the best delegation is that in
Figure 11.22 (bottom), since now the behavior of payment is entirely encapsulated within
<code class="code docutils literal notranslate"><span class="pre">Wallet</span></code>, as is the decision of when to raise an error for failed payments.</p>
<p>Inappropriate intimacy and Demeter violations can arise in any situation where you feel you are
“reaching through” an interface to get some task done, thereby exposing yourself to dependency
on implementation details of a class that should really be none of your business. Three design
patterns address common scenarios that could otherwise lead to Demeter violations. One is the
Visitor pattern, in which a data structure is traversed and you provide a callback method to
execute for each member of the data structure, allowing you to “visit” each element while
remaining ignorant of the way the data structure is organized. Indeed, the “data structure”
could even be materialized lazily as you visit the different nodes, rather than existing
statically all at once. An example of this pattern in the wild is the Nokogiri gem, which
supports traversal of HTML and XML documents organized as a tree: in addition to searching
for a specific element in a document, you can have Nokogiri traverse the document and call
a visitor method you provide at each document node.</p>
<p>A simple special case of Visitor is the <strong>Iterator pattern</strong>, which is so pervasive in Ruby
(you use it anytime you use <code class="code docutils literal notranslate"><span class="pre">each</span></code>) that many Rubyists hardly think of it as a pattern. Iterator
separates the implementation of traversing a collection from the behavior you want to apply
to each collection element. Without iterators, the behavior would have to “reach into” the
collection, thereby knowing inappropriately intimate details of how the collection is organized.</p>
<p>The last design pattern that can help with some cases of Demeter violations is the <strong>Observer
pattern</strong>, which is used when one class (the observer) wants to be kept aware of what another
class is doing (the subject) without knowing the details of the subject’s implementation. The
Observer design pattern provides a canonical way for the subject to maintain a list of its
observers and notify them automatically of any state changes in which they have indicated
interest, using a narrow interface to separate the concept of observation from the specifics
of what each observer does with the information.</p>
<p>While the Ruby standard library includes a mixin called <code class="code docutils literal notranslate"><span class="pre">Observable</span></code>, Rails’ ActiveSupport
provides a more concise Observer that lets you observe any model’s ActiveRecord lifecycle hooks
(<code class="code docutils literal notranslate"><span class="pre">after_save</span></code> and so on), introduced in Section 5.1. Figure 11.23 shows how easy it is to add
an <code class="code docutils literal notranslate"><span class="pre">EmailList</span></code> class to RottenPotatoes that “subscribes” to two kinds of state changes:</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">EmailList</span>
<span class="linenos"> 2</span>    <span class="n">observe</span> <span class="no">Review</span>
<span class="linenos"> 3</span>    <span class="k">def</span> <span class="nf">after_create</span><span class="p">(</span><span class="n">review</span><span class="p">)</span>
<span class="linenos"> 4</span>        <span class="n">moviegoers</span> <span class="o">=</span> <span class="n">review</span><span class="o">.</span><span class="n">moviegoers</span> <span class="c1"># from has_many :through, remember?</span>
<span class="linenos"> 5</span>        <span class="nb">self</span><span class="o">.</span><span class="n">email</span><span class="p">(</span><span class="n">moviegoers</span><span class="p">,</span> <span class="s2">&quot;A new review for </span><span class="si">#{</span><span class="n">review</span><span class="o">.</span><span class="n">movie</span><span class="si">}</span><span class="s2"> is up.&quot;</span><span class="p">)</span>
<span class="linenos"> 6</span>    <span class="k">end</span>
<span class="linenos"> 7</span>    <span class="n">observe</span> <span class="no">Moviegoer</span>
<span class="linenos"> 8</span>    <span class="k">def</span> <span class="nf">after_create</span><span class="p">(</span><span class="n">moviegoer</span><span class="p">)</span>
<span class="linenos"> 9</span>        <span class="nb">self</span><span class="o">.</span><span class="n">email</span><span class="p">(</span><span class="o">[</span><span class="n">moviegoer</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;Welcome, </span><span class="si">#{</span><span class="n">moviegoer</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">!&quot;</span><span class="p">)</span>
<span class="linenos">10</span>    <span class="k">end</span>
<span class="linenos">11</span>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">email</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos">12</span><span class="k">end</span>
</pre></div>
</div>
<ol class="arabic simple">
<li><p>When a new review is added, it emails all moviegoers who have already reviewed that same movie.</p></li>
<li><p>When a new moviegoer signs up, it sends her a “Welcome” email.</p></li>
</ol>
<p>In addition to ActiveRecord lifecycle hooks, Rails caching, which we will encounter in
Chapter 12, is another example of the Observer pattern in the wild: the cache for each type
of ActiveRecord model observes the model instance in order to know when model instances
become stale and should be removed from the cache. The observer doesn’t have to know the
implementation details of the observed class—it just gets called at the right time, like
Iterator and Visitor.</p>
<p>To close out this section, it’s worth pointing out an example that looks like it violates
Demeter, but really doesn’t. It’s common in Rails views (say, for a <code class="code docutils literal notranslate"><span class="pre">Review</span></code>) to see code such</p>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="x">&lt;p&gt; Review of: </span><span class="cp">&lt;%=</span> <span class="vi">@review</span><span class="o">.</span><span class="n">movie</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x"> &lt;/p&gt;</span>
<span class="x">&lt;p&gt; Written by: </span><span class="cp">&lt;%=</span> <span class="vi">@review</span><span class="o">.</span><span class="n">moviegoer</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x"> &lt;/p&gt;</span>
</pre></div>
</div>
<p>Aren’t these Demeter violations? It’s a judgment call: strictly speaking, a <code class="code docutils literal notranslate"><span class="pre">review</span></code> shouldn’t
know the implementation details of <code class="code docutils literal notranslate"><span class="pre">movie</span></code>, but it’s hard to argue that creating delegate methods
<code class="code docutils literal notranslate"><span class="pre">Review#movie_title</span></code> and <code class="code docutils literal notranslate"><span class="pre">Review#moviegoer_name</span></code> would enhance readability in this case. The
general opinion in the Rails community is that it’s acceptable for views whose purpose is to
display object relationships to also expose those relationships in the view code, so examples
like this are usually allowed to stand.</p>
<p><strong>Self-Check 11.7.1.</strong> <em>Ben Bitdiddle is a purist about Demeter violations, and
he objects to the expression</em> <code class="code docutils literal notranslate"><span class="pre">&#64;movie.reviews.average_rating</span></code> <em>in the movie details view,
which shows a movie’s average review score. How would you placate Ben and fix this Demeter
violation?</em></p>
<blockquote>
<div><div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="c1"># naive way:</span>
<span class="linenos"> 2</span><span class="k">class</span> <span class="nc">Movie</span>
<span class="linenos"> 3</span>    <span class="n">has_many</span> <span class="ss">:reviews</span>
<span class="linenos"> 4</span>    <span class="k">def</span> <span class="nf">average_rating</span>
<span class="linenos"> 5</span>        <span class="nb">self</span><span class="o">.</span><span class="n">reviews</span><span class="o">.</span><span class="n">average_rating</span> <span class="c1"># delegate to Review#average_rating</span>
<span class="linenos"> 6</span>    <span class="k">end</span>
<span class="linenos"> 7</span><span class="k">end</span>
<span class="linenos"> 8</span><span class="c1"># Rails shortcut:</span>
<span class="linenos"> 9</span><span class="k">class</span> <span class="nc">Movie</span>
<span class="linenos">10</span>    <span class="n">has_many</span> <span class="ss">:reviews</span>
<span class="linenos">11</span>    <span class="n">delegate</span> <span class="ss">:average_rating</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:review</span>
<span class="linenos">12</span><span class="k">end</span>
</pre></div>
</div>
</div></blockquote>
<p><strong>Self-Check 11.7.2.</strong> <em>Notwithstanding that “delegation is the key mechanism” for resolving Demeter
violations, why should you be concerned if you find yourself delegating many methods from class
A to class B just to resolve Demeter violations present in class C?</em></p>
<blockquote>
<div><p>You might ask yourself whether there should be a direct relationship between class C and class
B, or whether class A has “feature envy” for class B, indicating that the division of
responsibilities between A and B might need to be reengineered.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="6" title="previous page"><span class="section-number">11.6. </span>Dependency Injection Principle</a>
    <a class='right-next' id="next-link" href="8" title="next page"><span class="section-number">11.8. </span>The Plan-And-Document Perspective on Design Patterns</a>

        </div>
        
        </div>
    </div>
    <footer class="footer mt-5 mt-md-0">
    <div class="container">
      <p>
        
          By sme777<br/>
        
            &copy; Copyright 2021, Armando Fox and David Patterson.<br/>
      </p>
    </div>
  </footer>
</main>


      </div>
    </div>
  
  <script src="../../_static/js/index.1c5a1a01449ed65a7b51.js"></script>

  
  </body>
</html>